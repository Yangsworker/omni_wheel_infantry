<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TDT_Darts.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TDT_Darts.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Fri Feb 14 20:33:31 2025
<BR><P>
<H3>Maximum Stack Usage =       2192 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_GLOBAL__sub_I_state_task.cpp &rArr; __cxx_global_var_init.2 &rArr; KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char) &rArr; std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::__swap_out_circular_buffer(std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;&) &rArr; __aeabi_memcpy
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[16c]">_ZL13judge_BitSitet</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16c]">_ZL13judge_BitSitet</a><BR>
 <LI><a href="#[16f]">_ZL16judge_timBitSitet</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16f]">_ZL16judge_timBitSitet</a><BR>
 <LI><a href="#[16d]">_ZL13judge_BitSitet</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16d]">_ZL13judge_BitSitet</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from can.o(.text.CAN1_RX0_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from can.o(.text.CAN1_TX_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from can.o(.text.CAN2_RX0_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from can.o(.text.CAN2_TX_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from judgement.o(.text.DMA2_Stream1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from timer.o(.text.TIM2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from vision.o(.text.UART5_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from dbus.o(.text.USART2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[89]">_GLOBAL__sub_I_KeyProcess.cpp</a> from keyprocess.o(.text._GLOBAL__sub_I_KeyProcess.cpp) referenced from keyprocess.o(.init_array)
 <LI><a href="#[8d]">_GLOBAL__sub_I_adc.cpp</a> from adc.o(.text._GLOBAL__sub_I_adc.cpp) referenced from adc.o(.init_array)
 <LI><a href="#[97]">_GLOBAL__sub_I_ammo_cover_task.cpp</a> from ammo_cover_task.o(.text._GLOBAL__sub_I_ammo_cover_task.cpp) referenced from ammo_cover_task.o(.init_array)
 <LI><a href="#[91]">_GLOBAL__sub_I_bl24c512a.cpp</a> from bl24c512a.o(.text._GLOBAL__sub_I_bl24c512a.cpp) referenced from bl24c512a.o(.init_array)
 <LI><a href="#[8b]">_GLOBAL__sub_I_can.cpp</a> from can.o(.text._GLOBAL__sub_I_can.cpp) referenced from can.o(.init_array)
 <LI><a href="#[93]">_GLOBAL__sub_I_chassis_task.cpp</a> from chassis_task.o(.text._GLOBAL__sub_I_chassis_task.cpp) referenced from chassis_task.o(.init_array)
 <LI><a href="#[96]">_GLOBAL__sub_I_fire_task.cpp</a> from fire_task.o(.text._GLOBAL__sub_I_fire_task.cpp) referenced from fire_task.o(.init_array)
 <LI><a href="#[90]">_GLOBAL__sub_I_flash_var.cpp</a> from flash_var.o(.text._GLOBAL__sub_I_flash_var.cpp) referenced from flash_var.o(.init_array)
 <LI><a href="#[8f]">_GLOBAL__sub_I_judgement.cpp</a> from judgement.o(.text._GLOBAL__sub_I_judgement.cpp) referenced from judgement.o(.init_array)
 <LI><a href="#[94]">_GLOBAL__sub_I_led_task.cpp</a> from led_task.o(.text._GLOBAL__sub_I_led_task.cpp) referenced from led_task.o(.init_array)
 <LI><a href="#[92]">_GLOBAL__sub_I_power.cpp</a> from power.o(.text._GLOBAL__sub_I_power.cpp) referenced from power.o(.init_array)
 <LI><a href="#[95]">_GLOBAL__sub_I_ptz_task.cpp</a> from ptz_task.o(.text._GLOBAL__sub_I_ptz_task.cpp) referenced from ptz_task.o(.init_array)
 <LI><a href="#[8e]">_GLOBAL__sub_I_pwm.cpp</a> from pwm.o(.text._GLOBAL__sub_I_pwm.cpp) referenced from pwm.o(.init_array)
 <LI><a href="#[8a]">_GLOBAL__sub_I_smooth_start.cpp</a> from smooth_start.o(.text._GLOBAL__sub_I_smooth_start.cpp) referenced from smooth_start.o(.init_array)
 <LI><a href="#[98]">_GLOBAL__sub_I_state_task.cpp</a> from state_task.o(.text._GLOBAL__sub_I_state_task.cpp) referenced from state_task.o(.init_array)
 <LI><a href="#[8c]">_GLOBAL__sub_I_vision.cpp</a> from vision.o(.text._GLOBAL__sub_I_vision.cpp) referenced from vision.o(.init_array)
 <LI><a href="#[61]">SaveToMEMORY(unsigned*, unsigned)</a> from flash_var.o(.text._Z12SaveToMEMORYPjj) referenced 2 times from flash_var.o(.text.__cxx_global_var_init)
 <LI><a href="#[62]">ReadFromMEMORY()</a> from flash_var.o(.text._Z14ReadFromMEMORYv) referenced 2 times from flash_var.o(.text.__cxx_global_var_init)
 <LI><a href="#[79]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[79]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[79]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
 <LI><a href="#[7a]">__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv117__class_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[81]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv120__si_class_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[85]">__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv121__vmi_class_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
 <LI><a href="#[60]">TimeSimultaneity::~TimeSimultaneity()</a> from timematch.o(.text._ZN16TimeSimultaneityD2Ev) referenced 2 times from vision.o(.text.__cxx_global_var_init)
 <LI><a href="#[5f]">$_0::__invoke(unsigned*)</a> from state_task.o(.text._ZN3$_08__invokeEPj) referenced 2 times from state_task.o(.text._ZNK3$_0cvPFvPjEEv)
 <LI><a href="#[65]">IIC::iicInit()</a> from iic.o(.text._ZN3IIC7iicInitEv) referenced from iic.o(.rodata._ZTV3IIC)
 <LI><a href="#[6f]">ImuCalc::gyroAccUpdate()</a> from imu.o(.text._ZN7ImuCalc13gyroAccUpdateEv) referenced from imu.o(.rodata._ZTV7ImuCalc)
 <LI><a href="#[71]">ImuCalc::init()</a> from imu.o(.text._ZN7ImuCalc4initEv) referenced from imu.o(.rodata._ZTV7ImuCalc)
 <LI><a href="#[70]">ImuCalc::getOffset()</a> from imu.o(.text._ZN7ImuCalc9getOffsetEv) referenced from imu.o(.rodata._ZTV7ImuCalc)
 <LI><a href="#[70]">ImuCalc::getOffset()</a> from imu.o(.text._ZN7ImuCalc9getOffsetEv) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[73]">Mpu6050::gyroAccUpdate()</a> from mpu6050.o(.text._ZN7Mpu605013gyroAccUpdateEv) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[72]">Mpu6050::init()</a> from mpu6050.o(.text._ZN7Mpu60504initEv) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[6b]">Softiic::iicSendByte(unsigned char)</a> from iic.o(.text._ZN7Softiic11iicSendByteEh) referenced from bl24c512a.o(.rodata._ZTV7Bl24Cxx)
 <LI><a href="#[6b]">Softiic::iicSendByte(unsigned char)</a> from iic.o(.text._ZN7Softiic11iicSendByteEh) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[6b]">Softiic::iicSendByte(unsigned char)</a> from iic.o(.text._ZN7Softiic11iicSendByteEh) referenced from iic.o(.rodata._ZTV7Softiic)
 <LI><a href="#[66]">Softiic::iicCheckBusy()</a> from iic.o(.text._ZN7Softiic12iicCheckBusyEv) referenced from bl24c512a.o(.rodata._ZTV7Bl24Cxx)
 <LI><a href="#[66]">Softiic::iicCheckBusy()</a> from iic.o(.text._ZN7Softiic12iicCheckBusyEv) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[66]">Softiic::iicCheckBusy()</a> from iic.o(.text._ZN7Softiic12iicCheckBusyEv) referenced from iic.o(.rodata._ZTV7Softiic)
 <LI><a href="#[69]">Softiic::iicReceiveDataByte_Ack(unsigned char*)</a> from iic.o(.text._ZN7Softiic22iicReceiveDataByte_AckEPh) referenced from bl24c512a.o(.rodata._ZTV7Bl24Cxx)
 <LI><a href="#[69]">Softiic::iicReceiveDataByte_Ack(unsigned char*)</a> from iic.o(.text._ZN7Softiic22iicReceiveDataByte_AckEPh) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[69]">Softiic::iicReceiveDataByte_Ack(unsigned char*)</a> from iic.o(.text._ZN7Softiic22iicReceiveDataByte_AckEPh) referenced from iic.o(.rodata._ZTV7Softiic)
 <LI><a href="#[6a]">Softiic::iicReceiveDataByte_NoAck(unsigned char*)</a> from iic.o(.text._ZN7Softiic24iicReceiveDataByte_NoAckEPh) referenced from bl24c512a.o(.rodata._ZTV7Bl24Cxx)
 <LI><a href="#[6a]">Softiic::iicReceiveDataByte_NoAck(unsigned char*)</a> from iic.o(.text._ZN7Softiic24iicReceiveDataByte_NoAckEPh) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[6a]">Softiic::iicReceiveDataByte_NoAck(unsigned char*)</a> from iic.o(.text._ZN7Softiic24iicReceiveDataByte_NoAckEPh) referenced from iic.o(.rodata._ZTV7Softiic)
 <LI><a href="#[6e]">Softiic::iicInit()</a> from iic.o(.text._ZN7Softiic7iicInitEv) referenced from bl24c512a.o(.rodata._ZTV7Bl24Cxx)
 <LI><a href="#[6e]">Softiic::iicInit()</a> from iic.o(.text._ZN7Softiic7iicInitEv) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[6e]">Softiic::iicInit()</a> from iic.o(.text._ZN7Softiic7iicInitEv) referenced from iic.o(.rodata._ZTV7Softiic)
 <LI><a href="#[68]">Softiic::iicStop()</a> from iic.o(.text._ZN7Softiic7iicStopEv) referenced from bl24c512a.o(.rodata._ZTV7Bl24Cxx)
 <LI><a href="#[68]">Softiic::iicStop()</a> from iic.o(.text._ZN7Softiic7iicStopEv) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[68]">Softiic::iicStop()</a> from iic.o(.text._ZN7Softiic7iicStopEv) referenced from iic.o(.rodata._ZTV7Softiic)
 <LI><a href="#[6d]">Softiic::iicRAddr(unsigned char)</a> from iic.o(.text._ZN7Softiic8iicRAddrEh) referenced from bl24c512a.o(.rodata._ZTV7Bl24Cxx)
 <LI><a href="#[6d]">Softiic::iicRAddr(unsigned char)</a> from iic.o(.text._ZN7Softiic8iicRAddrEh) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[6d]">Softiic::iicRAddr(unsigned char)</a> from iic.o(.text._ZN7Softiic8iicRAddrEh) referenced from iic.o(.rodata._ZTV7Softiic)
 <LI><a href="#[67]">Softiic::iicStart()</a> from iic.o(.text._ZN7Softiic8iicStartEv) referenced from bl24c512a.o(.rodata._ZTV7Bl24Cxx)
 <LI><a href="#[67]">Softiic::iicStart()</a> from iic.o(.text._ZN7Softiic8iicStartEv) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[67]">Softiic::iicStart()</a> from iic.o(.text._ZN7Softiic8iicStartEv) referenced from iic.o(.rodata._ZTV7Softiic)
 <LI><a href="#[6c]">Softiic::iicWAddr(unsigned char)</a> from iic.o(.text._ZN7Softiic8iicWAddrEh) referenced from bl24c512a.o(.rodata._ZTV7Bl24Cxx)
 <LI><a href="#[6c]">Softiic::iicWAddr(unsigned char)</a> from iic.o(.text._ZN7Softiic8iicWAddrEh) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[6c]">Softiic::iicWAddr(unsigned char)</a> from iic.o(.text._ZN7Softiic8iicWAddrEh) referenced from iic.o(.rodata._ZTV7Softiic)
 <LI><a href="#[63]">FlashVar::~FlashVar__sub_object()</a> from flash_var.o(.text._ZN8FlashVarD2Ev) referenced 2 times from flash_var.o(.text.__cxx_global_var_init)
 <LI><a href="#[76]">MultiImu::gyroAccUpdate()</a> from multi_imu.o(.text._ZN8MultiImu13gyroAccUpdateEv) referenced from multi_imu.o(.rodata._ZTV8MultiImu)
 <LI><a href="#[78]">MultiImu::init()</a> from multi_imu.o(.text._ZN8MultiImu4initEv) referenced from multi_imu.o(.rodata._ZTV8MultiImu)
 <LI><a href="#[77]">MultiImu::getOffset()</a> from multi_imu.o(.text._ZN8MultiImu9getOffsetEv) referenced from multi_imu.o(.rodata._ZTV8MultiImu)
 <LI><a href="#[7b]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[7b]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[7b]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
 <LI><a href="#[7c]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[7c]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[7c]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
 <LI><a href="#[7e]">__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[7f]">__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[80]">__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[7d]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[7d]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[7d]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
 <LI><a href="#[82]">__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[83]">__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[84]">__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[86]">__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
 <LI><a href="#[87]">__cxxabiv1::__vmi_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
 <LI><a href="#[88]">__cxxabiv1::__vmi_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
 <LI><a href="#[74]">thunk{-32} to Mpu6050::gyroAccUpdate()</a> from mpu6050.o(.text._ZThn32_N7Mpu605013gyroAccUpdateEv) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[75]">thunk{-32} to Mpu6050::init()</a> from mpu6050.o(.text._ZThn32_N7Mpu60504initEv) referenced from mpu6050.o(.rodata._ZTV7Mpu6050)
 <LI><a href="#[64]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 8 times from iic.o(.rodata._ZTV3IIC)
 <LI><a href="#[5e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[5c]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[251]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bc]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[252]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9c]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[253]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[254]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[255]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9d]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[256]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>arm_cos_f32</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, arm_cos_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_cosf
</UL>

<P><STRONG><a name="[c7]"></a>arm_sin_f32</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, arm_sin_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_sinf
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::ringQueue()
</UL>

<P><STRONG><a name="[1f6]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::randomspeed_gyro()
</UL>

<P><STRONG><a name="[1f5]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::randomspeed_gyro()
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::ImuCalc()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::writeData(char*, int, bool)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::__swap_out_circular_buffer(std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;&)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCtrl::StateCtrl__sub_object()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Task()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;::__swap_out_circular_buffer(std::__1::__split_buffer&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&&rang;&)
</UL>

<P><STRONG><a name="[1b4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::setPlanNum(int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::gyroAccUpdate()
</UL>

<P><STRONG><a name="[224]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::getJudgeData()
</UL>

<P><STRONG><a name="[257]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[259]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::TimeSimultaneity(int, int, int)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::pop()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::clearCatch()
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::ImuCalc()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_update
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::TimeSimultaneity(int, int, int)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::clearCatch()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::run_1000Hz()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::ImuCalc()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::Ammo_offset(float, float, float)
</UL>

<P><STRONG><a name="[a3]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[21d]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::gyroAccUpdate()
</UL>

<P><STRONG><a name="[99]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[a4]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::randomspeed_gyro()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::SpeedingGyro()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::change_direction()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::frictionSpdLimit()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, double, int, float*, float)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::frictionSpdLimit()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::friction_ctrl()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator *()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::randomspeed_gyro()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::SpeedingGyro()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::motorOutput()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, double, int, float*, float)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_dcmple</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::frictionSpdLimit()
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_dcmpge</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::getPowerKp()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::getautofire()
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_ul2f</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ffltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeIntervalFrom_f(float)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Task()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::top(float, bool)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doubleKickJudge::doubleKickVal(unsigned char)
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator *()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::SpeedingGyro()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::frictionSpdLimit()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::Ammo_offset(float, float, float)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator *()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator *()
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator *()
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_f2ulz</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ffixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_Ctrl()
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::Ammo_offset(float, float, float)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, double, int, float*, float)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator *()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlSpeed(float, signed char, unsigned char)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::getPowerKp()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::randomspeed_gyro()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::motorOutput()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::change_direction()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Modeswitch_run()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::getautofire()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::fireload()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::frictionSpdLimit()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::Ammo_open()
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, double, int, float*, float)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::getPowerKp()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::randomspeed_gyro()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::SpeedingGyro()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::motorOutput()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::change_direction()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::friction_ctrl()
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[25b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[25c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[25d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__vmi_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
</UL>

<P><STRONG><a name="[25e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[b9]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[b0]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>

<P><STRONG><a name="[aa]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a9]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[25f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[9e]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[260]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>AHRS_asinf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ahrs_middleware.o(.text.AHRS_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AHRS_asinf &rArr; __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_init
</UL>

<P><STRONG><a name="[c0]"></a>AHRS_atan2f</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ahrs_middleware.o(.text.AHRS_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AHRS_atan2f &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_init
</UL>

<P><STRONG><a name="[c2]"></a>AHRS_cosf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ahrs_middleware.o(.text.AHRS_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AHRS_cosf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_to_quat
</UL>

<P><STRONG><a name="[236]"></a>AHRS_get_height</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, ahrs_middleware.o(.text.AHRS_get_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AHRS_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_init
</UL>

<P><STRONG><a name="[237]"></a>AHRS_get_latitude</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, ahrs_middleware.o(.text.AHRS_get_latitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AHRS_get_latitude
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_init
</UL>

<P><STRONG><a name="[c4]"></a>AHRS_invSqrt</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ahrs_middleware.o(.text.AHRS_invSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AHRS_invSqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quat_normalization
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_update_kp_ki
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_comple_filter
</UL>

<P><STRONG><a name="[c6]"></a>AHRS_sinf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ahrs_middleware.o(.text.AHRS_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AHRS_sinf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_to_quat
</UL>

<P><STRONG><a name="[c8]"></a>Append_CRC16_Check_Sum</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, crc.o(.text.Append_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Append_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vision_Send_Data()
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 708 bytes, Stack size 48 bytes, can.o(.text.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; Can::Motor_Information_Calculate(unsigned char, CanRxMsg*) &rArr; Can::IsDJIMotorCheck(CanRxMsg)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::Motor_Information_Calculate(unsigned char, CanRxMsg*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::myPowerCanRx(CanRxMsg)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, can.o(.text.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN1_TX_IRQHandler &rArr; CAN_GetITStatus &rArr; CheckITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, can.o(.text.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; Can::Motor_Information_Calculate(unsigned char, CanRxMsg*) &rArr; Can::IsDJIMotorCheck(CanRxMsg)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::Motor_Information_Calculate(unsigned char, CanRxMsg*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, can.o(.text.CAN2_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN2_TX_IRQHandler &rArr; CAN_GetITStatus &rArr; CheckITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 238 bytes, Stack size 12 bytes, stm32f4xx_can.o(.text.CAN_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>CAN_DeInit</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32f4xx_can.o(.text.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_DeInit &rArr; RCC_APB1PeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit(CAN_TypeDef*)
</UL>

<P><STRONG><a name="[14c]"></a>CAN_FilterInit</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit(CAN_TypeDef*)
</UL>

<P><STRONG><a name="[ca]"></a>CAN_GetITStatus</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, stm32f4xx_can.o(.text.CAN_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_GetITStatus &rArr; CheckITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>CAN_ITConfig</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32f4xx_can.o(.text.CAN_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit(CAN_TypeDef*)
</UL>

<P><STRONG><a name="[14b]"></a>CAN_Init</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, stm32f4xx_can.o(.text.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit(CAN_TypeDef*)
</UL>

<P><STRONG><a name="[cb]"></a>CAN_Receive</STRONG> (Thumb, 346 bytes, Stack size 12 bytes, stm32f4xx_can.o(.text.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>CAN_StructInit</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, stm32f4xx_can.o(.text.CAN_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CAN_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit(CAN_TypeDef*)
</UL>

<P><STRONG><a name="[147]"></a>CAN_Transmit</STRONG> (Thumb, 322 bytes, Stack size 12 bytes, stm32f4xx_can.o(.text.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTx(unsigned char*, CAN_TypeDef*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTx(float*, CAN_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[d2]"></a>ConfigureTimeForRunTimeStats</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(.text.ConfigureTimeForRunTimeStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ConfigureTimeForRunTimeStats &rArr; _ZL9TIM2_Initjt &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9TIM2_Initjt
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, judgement.o(.text.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::addFullCount()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>DMA_ClearFlag</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text.DMA_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text.DMA_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>DMA_Cmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text.DMA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vision_Send_Data()
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>DMA_DeInit</STRONG> (Thumb, 600 bytes, Stack size 4 bytes, stm32f4xx_dma.o(.text.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vision_Send_Data()
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[1c3]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text.DMA_DoubleBufferModeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_DoubleBufferModeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[1c2]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text.DMA_DoubleBufferModeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_DoubleBufferModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[ef]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text.DMA_GetCmdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_GetCmdStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vision_Send_Data()
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32f4xx_dma.o(.text.DMA_GetCurrDataCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_GetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::ringQueue()
</UL>

<P><STRONG><a name="[f4]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text.DMA_GetCurrentMemoryTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_GetCurrentMemoryTarget
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>DMA_GetITStatus</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32f4xx_dma.o(.text.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>DMA_Init</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vision_Send_Data()
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[f2]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text.DMA_SetCurrDataCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[135]"></a>FLASH_DataCacheCmd</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, stm32f4xx_flash.o(.text.FLASH_DataCacheCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_DataCacheCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[d8]"></a>FLASH_EraseSector</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, stm32f4xx_flash.o(.text.FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[db]"></a>FLASH_GetStatus</STRONG> (Thumb, 162 bytes, Stack size 4 bytes, stm32f4xx_flash.o(.text.FLASH_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[137]"></a>FLASH_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[da]"></a>FLASH_ProgramWord</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_flash.o(.text.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[134]"></a>FLASH_Unlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[d9]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[117]"></a>GPIO_Init</STRONG> (Thumb, 250 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15canGpioNvicInitP11CAN_TypeDef
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicInit()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::init()
</UL>

<P><STRONG><a name="[116]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(.text.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15canGpioNvicInitP11CAN_TypeDef
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[c9]"></a>Get_CRC16_Check_Sum</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, crc.o(.text.Get_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[165]"></a>IWDG_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdgInit(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[164]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdgInit(unsigned char, unsigned short)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdgFeed()
</UL>

<P><STRONG><a name="[123]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f4xx_iwdg.o(.text.IWDG_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IWDG_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdgInit(unsigned char, unsigned short)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::getOffset()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToMEMORY(unsigned*, unsigned)
</UL>

<P><STRONG><a name="[124]"></a>IWDG_SetReload</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f4xx_iwdg.o(.text.IWDG_SetReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IWDG_SetReload
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdgInit(unsigned char, unsigned short)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::getOffset()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToMEMORY(unsigned*, unsigned)
</UL>

<P><STRONG><a name="[122]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f4xx_iwdg.o(.text.IWDG_WriteAccessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IWDG_WriteAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdgInit(unsigned char, unsigned short)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::getOffset()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToMEMORY(unsigned*, unsigned)
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>NVIC_Init</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9TIM2_Initjt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15canGpioNvicInitP11CAN_TypeDef
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[235]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, misc.o(.text.NVIC_PriorityGroupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text.RCC_AHB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15canGpioNvicInitP11CAN_TypeDef
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicInit()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::init()
</UL>

<P><STRONG><a name="[115]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9TIM2_Initjt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15canGpioNvicInitP11CAN_TypeDef
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[d0]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text.RCC_APB1PeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[f7]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text.RCC_APB2PeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[f9]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, stm32f4xx_rcc.o(.text.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTickInit()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[11e]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, misc.o(.text.SysTick_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTickInit()
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = SysTick_Handler &rArr; TDT_Loop &rArr; TDT_Loop_500Hz() &rArr; Chassis_Task() &rArr; Chassis::chassis_run() &rArr; Chassis::randomspeed_gyro() &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>TDT_Loop</STRONG> (Thumb, 476 bytes, Stack size 88 bytes, schedule.o(.text.TDT_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = TDT_Loop &rArr; TDT_Loop_500Hz() &rArr; Chassis_Task() &rArr; Chassis::chassis_run() &rArr; Chassis::randomspeed_gyro() &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_1000Hz()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_200Hz()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_100Hz()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_50Hz()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_20Hz()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_10Hz()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_2Hz()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_1Hz()
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text.TIM_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9TIM2_Initjt
</UL>

<P><STRONG><a name="[171]"></a>TIM_Cmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text.TIM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9TIM2_Initjt
</UL>

<P><STRONG><a name="[e8]"></a>TIM_GetITStatus</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>TIM_ITConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9TIM2_Initjt
</UL>

<P><STRONG><a name="[170]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 270 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL9TIM2_Initjt
</UL>

<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, vision.o(.text.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART5_IRQHandler &rArr; Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, dbus.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrentMemoryTarget
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c1]"></a>USART_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text.USART_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[ec]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f4xx_usart.o(.text.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>USART_Cmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text.USART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[11b]"></a>USART_DMACmd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text.USART_DMACmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[f6]"></a>USART_DeInit</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, stm32f4xx_usart.o(.text.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_DeInit &rArr; RCC_APB2PeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[ea]"></a>USART_GetITStatus</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, stm32f4xx_usart.o(.text.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>USART_ITConfig</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f4xx_usart.o(.text.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[f8]"></a>USART_Init</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, stm32f4xx_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>

<P><STRONG><a name="[f3]"></a>USART_ReceiveData</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32f4xx_usart.o(.text.USART_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>Verify_CRC16_Check_Sum</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, crc.o(.text.Verify_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>State_Ctrl()</STRONG> (Thumb, 1636 bytes, Stack size 40 bytes, state_task.o(.text._Z10State_Ctrlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = State_Ctrl() &rArr; canTx(unsigned char*, CAN_TypeDef*, unsigned) &rArr; delayUs(unsigned) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTx(unsigned char*, CAN_TypeDef*, unsigned)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::getGimbalAngle()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[201]"></a>fast_atan2(float, float)</STRONG> (Thumb, 660 bytes, Stack size 48 bytes, my_math.o(.text._Z10fast_atan2ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fast_atan2(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_IMU_update(bool)
</UL>

<P><STRONG><a name="[113]"></a>Vision_Init()</STRONG> (Thumb, 502 bytes, Stack size 120 bytes, vision.o(.text._Z11Vision_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Vision_Init() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[11c]"></a>sysTickInit()</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, board.o(.text._Z11sysTickInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sysTickInit() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14SysTick_Configj
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>Chassis_Task()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, chassis_task.o(.text._Z12Chassis_Taskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = Chassis_Task() &rArr; Chassis::chassis_run() &rArr; Chassis::randomspeed_gyro() &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::motorOutput()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[61]"></a>SaveToMEMORY(unsigned*, unsigned)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, flash_var.o(.text._Z12SaveToMEMORYPjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SaveToMEMORY(unsigned*, unsigned) &rArr; STMFLASH_Write(unsigned, unsigned*, unsigned) &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdgFeed()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_var.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[e7]"></a>TDT_Loop_1Hz()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, schedule.o(.text._Z12TDT_Loop_1Hzv))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[e6]"></a>TDT_Loop_2Hz()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, schedule.o(.text._Z12TDT_Loop_2Hzv))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[127]"></a>boardALLInit()</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, board.o(.text._Z12boardALLInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = boardALLInit() &rArr; imuInit() &rArr; ImuCalc::initalAngle() &rArr; AHRS_init &rArr; angle_to_quat &rArr; AHRS_sinf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpf2p::SetCutoffFreq(float, float)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::init()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Ptz_Task_Init()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdgInit(unsigned char, unsigned short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit(CAN_TypeDef*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>getSysTimeUs()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, timer.o(.text._Z12getSysTimeUsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getSysTimeUs()
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs(unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeIntervalFrom_f(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeIntervalFrom(unsigned long long)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSelfCheck::run()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_IMU_update(bool)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::top(float, bool)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doubleKickJudge::doubleKickVal(unsigned char)
</UL>

<P><STRONG><a name="[1bd]"></a>my_deathzoom(float, float)</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, my_math.o(.text._Z12my_deathzoomff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_deathzoom(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::handleData(const volatile unsigned char*)
</UL>

<P><STRONG><a name="[12f]"></a>STMFLASH_Read(unsigned, unsigned*, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, flash_var.o(.text._Z13STMFLASH_ReadjPjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = STMFLASH_Read(unsigned, unsigned*, unsigned) &rArr; STMFLASH_ReadWord(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromMEMORY()
</UL>

<P><STRONG><a name="[e5]"></a>TDT_Loop_10Hz()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, schedule.o(.text._Z13TDT_Loop_10Hzv))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[e4]"></a>TDT_Loop_20Hz()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, schedule.o(.text._Z13TDT_Loop_20Hzv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TDT_Loop_20Hz() &rArr; Led_Task() &rArr; Led::stateShow(unsigned short) &rArr; Led::getError()
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task()
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[e3]"></a>TDT_Loop_50Hz()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, schedule.o(.text._Z13TDT_Loop_50Hzv))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[62]"></a>ReadFromMEMORY()</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, flash_var.o(.text._Z14ReadFromMEMORYv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReadFromMEMORY() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read(unsigned, unsigned*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_var.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[125]"></a>STMFLASH_Write(unsigned, unsigned*, unsigned)</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, flash_var.o(.text._Z14STMFLASH_WritejPjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = STMFLASH_Write(unsigned, unsigned*, unsigned) &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation &rArr; FLASH_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdgFeed()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_GetFlashSector(unsigned)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord(unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DataCacheCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToMEMORY(unsigned*, unsigned)
</UL>

<P><STRONG><a name="[e2]"></a>TDT_Loop_100Hz()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, schedule.o(.text._Z14TDT_Loop_100Hzv))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[e1]"></a>TDT_Loop_200Hz()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, schedule.o(.text._Z14TDT_Loop_200Hzv))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[e0]"></a>TDT_Loop_500Hz()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, schedule.o(.text._Z14TDT_Loop_500Hzv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = TDT_Loop_500Hz() &rArr; Chassis_Task() &rArr; Chassis::chassis_run() &rArr; Chassis::randomspeed_gyro() &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCtrl::changeVisionError()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::sendCanMsg()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSelfCheck::run()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire_Task()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ammo_Task()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ptz_task()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Task()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_Ctrl_RC_Info()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Task()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_Ctrl()
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[df]"></a>TDT_Loop_1000Hz()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, schedule.o(.text._Z15TDT_Loop_1000Hzv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TDT_Loop_1000Hz() &rArr; _RC::run_1000Hz() &rArr; _RC::taskSchedule() &rArr; _RC::remoteUpdate() &rArr; KeyProcess::keyHandle(unsigned short) &rArr; KeyProcess::keyTravel(unsigned short, unsigned short, unsigned short, unsigned) &rArr; KeyProcess::disable() &rArr; KeyProcess::preRelease()
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::run_1000Hz()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringQueue()
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop
</UL>

<P><STRONG><a name="[142]"></a>timeIntervalFrom(unsigned long long)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, board.o(.text._Z16timeIntervalFromy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timeIntervalFrom(unsigned long long) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::run_1000Hz()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSelfCheck::run()
</UL>

<P><STRONG><a name="[143]"></a>vision_Send_Data()</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, vision.o(.text._Z16vision_Send_Datav))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vision_Send_Data() &rArr; TimeSimultaneity::writeData(char*, int, bool) &rArr; TimeSimultaneity::clearCatch()
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::writeData(char*, int, bool)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Task()
</UL>

<P><STRONG><a name="[130]"></a>STMFLASH_ReadWord(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, flash_var.o(.text._Z17STMFLASH_ReadWordj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = STMFLASH_ReadWord(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read(unsigned, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[13d]"></a>State_Ctrl_RC_Info()</STRONG> (Thumb, 330 bytes, Stack size 4 bytes, state_task.o(.text._Z18State_Ctrl_RC_Infov))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = State_Ctrl_RC_Info()
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[145]"></a>timeIntervalFrom_f(float)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, board.o(.text._Z18timeIntervalFrom_ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timeIntervalFrom_f(float) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doubleKickJudge::doubleKickVal(unsigned char)
</UL>

<P><STRONG><a name="[136]"></a>STMFLASH_GetFlashSector(unsigned)</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, flash_var.o(.text._Z23STMFLASH_GetFlashSectorj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STMFLASH_GetFlashSector(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[146]"></a>canTx(float*, CAN_TypeDef*, unsigned)</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, can.o(.text._Z5canTxPfP11CAN_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = canTx(float*, CAN_TypeDef*, unsigned) &rArr; delayUs(unsigned) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs(unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::sendCanMsg()
</UL>

<P><STRONG><a name="[112]"></a>canTx(unsigned char*, CAN_TypeDef*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, can.o(.text._Z5canTxPhP11CAN_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = canTx(unsigned char*, CAN_TypeDef*, unsigned) &rArr; delayUs(unsigned) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs(unsigned)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_Ctrl()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::myPowerCanTx()
</UL>

<P><STRONG><a name="[128]"></a>canInit(CAN_TypeDef*)</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, can.o(.text._Z7canInitP11CAN_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = canInit(CAN_TypeDef*) &rArr; _ZL15canGpioNvicInitP11CAN_TypeDef &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15canGpioNvicInitP11CAN_TypeDef
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[14e]"></a>delayMs(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, board.o(.text._Z7delayMsj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = delayMs(unsigned) &rArr; delayUs(unsigned) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayUs(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::getOffset()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::init(unsigned short, unsigned short)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::getOffset()
</UL>

<P><STRONG><a name="[148]"></a>delayUs(unsigned)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, board.o(.text._Z7delayUsj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delayUs(unsigned) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs(unsigned)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTx(unsigned char*, CAN_TypeDef*, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTx(float*, CAN_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[12a]"></a>imuInit()</STRONG> (Thumb, 428 bytes, Stack size 168 bytes, imu_task.o(.text._Z7imuInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = imuInit() &rArr; ImuCalc::initalAngle() &rArr; AHRS_init &rArr; angle_to_quat &rArr; AHRS_sinf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs(unsigned)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::setGyroScaleFactor(float(*)[3])
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::setAccScaleFactor(float(*)[3])
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::initalAngle()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::Mpu6050(GPIO_TypeDef*, unsigned short, unsigned short, GPIO_TypeDef*, I2C_TypeDef*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::MultiImu__sub_object()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void FlashVar::link&lang;_vec3f&rang;(T1&, unsigned short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[129]"></a>ledInit()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, led_task.o(.text._Z7ledInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ledInit() &rArr; Led::init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::show(unsigned char)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::init()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::setLHNagation(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[200]"></a>my_sqrt(float)</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, my_math.o(.text._Z7my_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_sqrt(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_IMU_update(bool)
</UL>

<P><STRONG><a name="[138]"></a>Imu_Task()</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, imu_task.o(.text._Z8Imu_Taskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Imu_Task() &rArr; ImuCalc::TDT_IMU_update(bool) &rArr; AHRS_update &rArr; accel_comple_filter &rArr; accel_update_kp_ki &rArr; AHRS_invSqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_IMU_update(bool)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::top(float, bool)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vision_Send_Data()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::node_& TimeSimultaneity::node_::operator &lang;&lang;&lang;_vec2f&rang;(T1)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[131]"></a>Led_Task()</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, led_task.o(.text._Z8Led_Taskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Led_Task() &rArr; Led::stateShow(unsigned short) &rArr; Led::getError()
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::setError(signed char, LedES)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdgFeed()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::stateShow(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_20Hz()
</UL>

<P><STRONG><a name="[139]"></a>Ptz_task()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ptz_task.o(.text._Z8Ptz_taskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Ptz_task() &rArr; PTZ::Modeswitch_run() &rArr; Motor::ctrlPosition(double, signed char, unsigned char) &rArr; Motor::ctrlSpeed(float, signed char, unsigned char) &rArr; Pid::Calculate(double, int, float*, float) &rArr; Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Modeswitch_run()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::ModeJudge_PTZ()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::getautofire()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::fbValUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[126]"></a>iwdgFeed()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdg.o(.text._Z8iwdgFeedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iwdgFeed()
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::getOffset()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveToMEMORY(unsigned*, unsigned)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::getOffset()
</UL>

<P><STRONG><a name="[12e]"></a>iwdgInit(unsigned char, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, iwdg.o(.text._Z8iwdgInitht))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = iwdgInit(unsigned char, unsigned short) &rArr; IWDG_WriteAccessCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[13b]"></a>Ammo_Task()</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, ammo_cover_task.o(.text._Z9Ammo_Taskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Ammo_Task() &rArr; AmmoCover::Ammo_offset(float, float, float) &rArr; Motor::ctrlPosition(double, signed char, unsigned char) &rArr; Motor::ctrlSpeed(float, signed char, unsigned char) &rArr; Pid::Calculate(double, int, float*, float) &rArr; Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::Ammo_open()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::Ammo_offset(float, float, float)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::auto_close()
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[13a]"></a>Fire_Task()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fire_task.o(.text._Z9Fire_Taskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Fire_Task() &rArr; Fire::ModeJudge_Fire() &rArr; Fire::fireload() &rArr; Motor::ctrlPosition(double, signed char, unsigned char) &rArr; Motor::ctrlSpeed(float, signed char, unsigned char) &rArr; Pid::Calculate(double, int, float*, float) &rArr; Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::ModeJudge_Fire()
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[141]"></a>ringQueue()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, judgement.o(.text._Z9ringQueuev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ringQueue() &rArr; Judgement::ringQueue() &rArr; Judgement::getJudgeData() &rArr; Judgement::getLength(Judgement::FrameHeader*)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::ringQueue()
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_1000Hz()
</UL>

<P><STRONG><a name="[174]"></a>KeyProcess::preRelease()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, keyprocess.o(.text._ZN10KeyProcess10preReleaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KeyProcess::preRelease()
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::keyTravel(unsigned short, unsigned short, unsigned short, unsigned)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::disable()
</UL>

<P><STRONG><a name="[178]"></a>KeyProcess::enable()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, keyprocess.o(.text._ZN10KeyProcess6enableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = KeyProcess::enable()
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::keyTravel(unsigned short, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[173]"></a>KeyProcess::disable()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, keyprocess.o(.text._ZN10KeyProcess7disableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyProcess::disable() &rArr; KeyProcess::preRelease()
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::preRelease()
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::keyTravel(unsigned short, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[179]"></a>KeyProcess::preHold()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, keyprocess.o(.text._ZN10KeyProcess7preHoldEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KeyProcess::preHold()
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::keyTravel(unsigned short, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[17a]"></a>KeyProcess::prePress()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, keyprocess.o(.text._ZN10KeyProcess8prePressEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KeyProcess::prePress()
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::keyTravel(unsigned short, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[175]"></a>KeyProcess::keyHandle(unsigned short)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, keyprocess.o(.text._ZN10KeyProcess9keyHandleEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = KeyProcess::keyHandle(unsigned short) &rArr; KeyProcess::keyTravel(unsigned short, unsigned short, unsigned short, unsigned) &rArr; KeyProcess::disable() &rArr; KeyProcess::preRelease()
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::keyTravel(unsigned short, unsigned short, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::run_1000Hz()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::remoteUpdate()
</UL>

<P><STRONG><a name="[177]"></a>KeyProcess::keyTravel(unsigned short, unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, keyprocess.o(.text._ZN10KeyProcess9keyTravelEtttj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = KeyProcess::keyTravel(unsigned short, unsigned short, unsigned short, unsigned) &rArr; KeyProcess::disable() &rArr; KeyProcess::preRelease()
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::prePress()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::preHold()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::disable()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::enable()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::preRelease()
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::keyHandle(unsigned short)
</UL>

<P><STRONG><a name="[17b]"></a>KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)</STRONG> (Thumb, 3478 bytes, Stack size 1776 bytes, keyprocess.o(.text._ZN10KeyProcessC2EtPFvPjES2_S2_hh))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char) &rArr; std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::__swap_out_circular_buffer(std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__split_buffer&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&&rang;::__split_buffer__sub_object(unsigned, unsigned, std::__1::allocator&lang;KeyProcess*&rang;&)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::max_size() const
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;::max_size() const
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__vector_base_common&lang;(bool)1&rang;::__throw_length_error() const
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::__swap_out_circular_buffer(std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;&)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;&, unsigned)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;::__swap_out_circular_buffer(std::__1::__split_buffer&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&&rang;&)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;&, unsigned)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;::__split_buffer__sub_object(unsigned, unsigned, std::__1::allocator&lang;unsigned short&rang;&)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__split_buffer&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&&rang;::~__split_buffer__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
</UL>

<P><STRONG><a name="[261]"></a>KeyProcess::KeyProcess__sub_object(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)</STRONG> (Thumb, 3478 bytes, Stack size 1776 bytes, keyprocess.o(.text._ZN10KeyProcessC2EtPFvPjES2_S2_hh), UNUSED)

<P><STRONG><a name="[183]"></a>KeyProcess::KeyProcess()</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, keyprocess.o(.text._ZN10KeyProcessC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = KeyProcess::KeyProcess()
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[262]"></a>KeyProcess::KeyProcess__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, keyprocess.o(.text._ZN10KeyProcessC2Ev), UNUSED)

<P><STRONG><a name="[18b]"></a>__cxxabiv1::__enum_type_info::~__enum_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::~type_info__sub_object()
</UL>

<P><STRONG><a name="[263]"></a>__cxxabiv1::__enum_type_info::~__enum_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[264]"></a>__cxxabiv1::__shim_type_info::~__shim_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[79]"></a>__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
</UL>
<P><STRONG><a name="[265]"></a>__cxxabiv1::__array_type_info::~__array_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[266]"></a>__cxxabiv1::__array_type_info::~__array_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[267]"></a>__cxxabiv1::__class_type_info::~__class_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[268]"></a>__cxxabiv1::__class_type_info::~__class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[269]"></a>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[26a]"></a>__cxxabiv1::__pbase_type_info::~__pbase_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[26b]"></a>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[26c]"></a>__cxxabiv1::__pointer_type_info::~__pointer_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[26d]"></a>__cxxabiv1::__function_type_info::~__function_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[26e]"></a>__cxxabiv1::__function_type_info::~__function_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[26f]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[270]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[271]"></a>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[272]"></a>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[273]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[274]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[275]"></a>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[276]"></a>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[7a]"></a>__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv117__class_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __cxxabiv1::__class_type_info::~__class_type_info__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[81]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv120__si_class_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[85]"></a>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv121__vmi_class_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
</UL>
<P><STRONG><a name="[1b3]"></a>_FbValuePtr::_FbValuePtr()</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, pid.o(.text._ZN11_FbValuePtrC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _FbValuePtr::_FbValuePtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid(int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::setPlanNum(int)
</UL>

<P><STRONG><a name="[277]"></a>_FbValuePtr::_FbValuePtr__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, pid.o(.text._ZN11_FbValuePtrC2Ev), UNUSED)

<P><STRONG><a name="[1ab]"></a>_FbValuePtr::operator =(float*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pid.o(.text._ZN11_FbValuePtraSEPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _FbValuePtr::operator =(float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Ptz_Task_Init()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::Fire(unsigned short, unsigned short, unsigned short)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::AmmoCover()
</UL>

<P><STRONG><a name="[1e4]"></a>_FbValuePtr::operator =(int*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pid.o(.text._ZN11_FbValuePtraSEPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _FbValuePtr::operator =(int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, CAN_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[1d1]"></a>_FbValuePtr::operator =(short*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pid.o(.text._ZN11_FbValuePtraSEPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _FbValuePtr::operator =(short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, CAN_TypeDef*, unsigned)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::Fire(unsigned short, unsigned short, unsigned short)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::AmmoCover()
</UL>

<P><STRONG><a name="[18d]"></a>_FbValuePtr::operator *()</STRONG> (Thumb, 542 bytes, Stack size 104 bytes, pid.o(.text._ZN11_FbValuePtrdeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _FbValuePtr::operator *() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator !()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, int, float*, float)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::Ammo_offset(float, float, float)
</UL>

<P><STRONG><a name="[18e]"></a>_FbValuePtr::operator !()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, pid.o(.text._ZN11_FbValuePtrntEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _FbValuePtr::operator !()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::LoadCheck(int)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator *()
</UL>

<P><STRONG><a name="[230]"></a>PowerRecvMsg::PowerRecvMsg__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, can.o(.text._ZN12PowerRecvMsgC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PowerRecvMsg::PowerRecvMsg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[13c]"></a>FastSelfCheck::run()</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, state_task.o(.text._ZN13FastSelfCheck3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FastSelfCheck::run() &rArr; timeIntervalFrom(unsigned long long) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeIntervalFrom(unsigned long long)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::setError(signed char, signed char)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::setError(signed char, LedES)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getEnableMotor()
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[233]"></a>FastSelfCheck::FastSelfCheck__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, state_task.o(.text._ZN13FastSelfCheckC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FastSelfCheck::FastSelfCheck__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[192]"></a>TimeSimultaneity::clearCatch()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timematch.o(.text._ZN16TimeSimultaneity10clearCatchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimeSimultaneity::clearCatch()
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::writeData(char*, int, bool)
</UL>

<P><STRONG><a name="[195]"></a>TimeSimultaneity::getFixedTime(float)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timematch.o(.text._ZN16TimeSimultaneity12getFixedTimeEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimeSimultaneity::getFixedTime(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::top(float, bool)
</UL>

<P><STRONG><a name="[193]"></a>TimeSimultaneity::pop()</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, timematch.o(.text._ZN16TimeSimultaneity3popEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimeSimultaneity::pop()
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::top(float, bool)
</UL>

<P><STRONG><a name="[15b]"></a>TimeSimultaneity::top(float, bool)</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, timematch.o(.text._ZN16TimeSimultaneity3topEfb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TimeSimultaneity::top(float, bool) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::node_::node_(void*, int, int*, int*)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::pop()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::getFixedTime(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Task()
</UL>

<P><STRONG><a name="[194]"></a>TimeSimultaneity::node_::node_(void*, int, int*, int*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timematch.o(.text._ZN16TimeSimultaneity5node_C2EPviPiS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimeSimultaneity::node_::node_(void*, int, int*, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::top(float, bool)
</UL>

<P><STRONG><a name="[278]"></a>TimeSimultaneity::node_::node___sub_object(void*, int, int*, int*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timematch.o(.text._ZN16TimeSimultaneity5node_C2EPviPiS2_), UNUSED)

<P><STRONG><a name="[15c]"></a>TimeSimultaneity::node_& TimeSimultaneity::node_::operator &lang;&lang;&lang;_vec2f&rang;(T1)</STRONG> (Thumb, 90 bytes, Stack size 28 bytes, imu_task.o(.text._ZN16TimeSimultaneity5node_lsI6_vec2fEERS0_T_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TimeSimultaneity::node_& TimeSimultaneity::node_::operator &lang;&lang;&lang;_vec2f&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Task()
</UL>

<P><STRONG><a name="[144]"></a>TimeSimultaneity::writeData(char*, int, bool)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timematch.o(.text._ZN16TimeSimultaneity9writeDataEPcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TimeSimultaneity::writeData(char*, int, bool) &rArr; TimeSimultaneity::clearCatch()
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::clearCatch()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vision_Send_Data()
</UL>

<P><STRONG><a name="[196]"></a>TimeSimultaneity::TimeSimultaneity(int, int, int)</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, timematch.o(.text._ZN16TimeSimultaneityC2Eiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TimeSimultaneity::TimeSimultaneity(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[279]"></a>TimeSimultaneity::TimeSimultaneity__sub_object(int, int, int)</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, timematch.o(.text._ZN16TimeSimultaneityC2Eiii), UNUSED)

<P><STRONG><a name="[60]"></a>TimeSimultaneity::~TimeSimultaneity()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timematch.o(.text._ZN16TimeSimultaneityD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TimeSimultaneity::~TimeSimultaneity() &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vision.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[27a]"></a>TimeSimultaneity::~TimeSimultaneity__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timematch.o(.text._ZN16TimeSimultaneityD2Ev), UNUSED)

<P><STRONG><a name="[197]"></a>_doubleKickJudge::doubleKickVal(unsigned char)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, chassis_task.o(.text._ZN16_doubleKickJudge13doubleKickValEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _doubleKickJudge::doubleKickVal(unsigned char) &rArr; timeIntervalFrom_f(float) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeIntervalFrom_f(float)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::powerCtrlUpdate()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::ModeJudge_PTZ()
</UL>

<P><STRONG><a name="[199]"></a>Adc::Adc(GPIO_TypeDef*, unsigned short, ADC_TypeDef*, unsigned char)</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, adc.o(.text._ZN3AdcC2EP12GPIO_TypeDeftP11ADC_TypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Adc::Adc(GPIO_TypeDef*, unsigned short, ADC_TypeDef*, unsigned char) &rArr; _ZL13judge_BitSitet &rArr;  _ZL13judge_BitSitet (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13judge_BitSitet
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[27b]"></a>Adc::Adc__sub_object(GPIO_TypeDef*, unsigned short, ADC_TypeDef*, unsigned char)</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, adc.o(.text._ZN3AdcC2EP12GPIO_TypeDeftP11ADC_TypeDefh), UNUSED)

<P><STRONG><a name="[19a]"></a>Can::Motor_Offset(unsigned char, CanRxMsg*)</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, can_calculate.o(.text._ZN3Can12Motor_OffsetEhP8CanRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Can::Motor_Offset(unsigned char, CanRxMsg*) &rArr; Motor::getType()
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getType()
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::Motor_Information_Calculate(unsigned char, CanRxMsg*)
</UL>

<P><STRONG><a name="[19c]"></a>Can::IsDJIMotorCheck(CanRxMsg)</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, can_calculate.o(.text._ZN3Can15IsDJIMotorCheckE8CanRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Can::IsDJIMotorCheck(CanRxMsg)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::Motor_Information_Calculate(unsigned char, CanRxMsg*)
</UL>

<P><STRONG><a name="[cc]"></a>Can::Motor_Information_Calculate(unsigned char, CanRxMsg*)</STRONG> (Thumb, 832 bytes, Stack size 64 bytes, can_calculate.o(.text._ZN3Can27Motor_Information_CalculateEhP8CanRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Can::Motor_Information_Calculate(unsigned char, CanRxMsg*) &rArr; Can::IsDJIMotorCheck(CanRxMsg)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getType()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::IsDJIMotorCheck(CanRxMsg)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::Motor_Offset(unsigned char, CanRxMsg*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[19d]"></a>IIC::iicRegReadByte(unsigned char, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, iic.o(.text._ZN3IIC14iicRegReadByteEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC::iicRegReadByte(unsigned char, unsigned char) &rArr; IIC::iicRegReadData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::iicRegReadData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::Mpu6050_Read_Gyro_Data()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::Mpu6050_Read_Acc_Data()
</UL>

<P><STRONG><a name="[19e]"></a>IIC::iicRegReadData(unsigned char, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, iic.o(.text._ZN3IIC14iicRegReadDataEhhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC::iicRegReadData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::iicRegReadByte(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[19f]"></a>IIC::iicRegWriteByte(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, iic.o(.text._ZN3IIC15iicRegWriteByteEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC::iicRegWriteByte(unsigned char, unsigned char, unsigned char) &rArr; IIC::iicRegWriteData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::iicRegWriteData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::init(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[1a0]"></a>IIC::iicRegWriteData(unsigned char, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, iic.o(.text._ZN3IIC15iicRegWriteDataEhhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC::iicRegWriteData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::iicRegWriteByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[65]"></a>IIC::iicInit()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, iic.o(.text._ZN3IIC7iicInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IIC::iicInit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic.o(.rodata._ZTV3IIC)
</UL>
<P><STRONG><a name="[211]"></a>IIC::IIC__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, iic.o(.text._ZN3IICC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::Softiic(GPIO_TypeDef*, unsigned short, unsigned short, I2C_TypeDef*, unsigned, GPIO_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[158]"></a>Led::setLHNagation(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led_task.o(.text._ZN3Led13setLHNagationEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Led::setLHNagation(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit()
</UL>

<P><STRONG><a name="[157]"></a>Led::init()</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, led.o(.text._ZN3Led4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Led::init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::show(unsigned char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit()
</UL>

<P><STRONG><a name="[159]"></a>Led::show(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, led.o(.text._ZN3Led4showEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Led::show(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::getOffset()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::stateShow(unsigned short)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::init()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::getOffset()
</UL>

<P><STRONG><a name="[1a2]"></a>Led::toggle()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, led.o(.text._ZN3Led6toggleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Led::toggle()
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::stateShow(unsigned short)
</UL>

<P><STRONG><a name="[1a1]"></a>Led::getError()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, led.o(.text._ZN3Led8getErrorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Led::getError()
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::stateShow(unsigned short)
</UL>

<P><STRONG><a name="[15e]"></a>Led::setError(signed char, LedES)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, imu.o(.text._ZN3Led8setErrorEa5LedES))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Led::setError(signed char, LedES) &rArr; Led::setError(signed char, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::setError(signed char, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSelfCheck::run()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::getOffset()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::getOffset()
</UL>

<P><STRONG><a name="[190]"></a>Led::setError(signed char, signed char)</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, led.o(.text._ZN3Led8setErrorEaa))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Led::setError(signed char, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSelfCheck::run()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::setError(signed char, LedES)
</UL>

<P><STRONG><a name="[15f]"></a>Led::stateShow(unsigned short)</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, led.o(.text._ZN3Led9stateShowEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Led::stateShow(unsigned short) &rArr; Led::getError()
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::show(unsigned char)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::getError()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::toggle()
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::getOffset()
</UL>

<P><STRONG><a name="[1a3]"></a>Led::Led(unsigned, GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, led.o(.text._ZN3LedC2EjP12GPIO_TypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Led::Led(unsigned, GPIO_TypeDef*, unsigned short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[27c]"></a>Led::Led__sub_object(unsigned, GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, led.o(.text._ZN3LedC2EjP12GPIO_TypeDeft), UNUSED)

<P><STRONG><a name="[160]"></a>PTZ::fbValUpdate()</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, ptz_task.o(.text._ZN3PTZ11fbValUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PTZ::fbValUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Ptz_Task_Init()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ptz_task()
</UL>

<P><STRONG><a name="[163]"></a>PTZ::getautofire()</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, ptz_task.o(.text._ZN3PTZ11getautofireEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PTZ::getautofire() &rArr; __aeabi_dcmpge
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ptz_task()
</UL>

<P><STRONG><a name="[161]"></a>PTZ::ModeJudge_PTZ()</STRONG> (Thumb, 1048 bytes, Stack size 24 bytes, ptz_task.o(.text._ZN3PTZ13ModeJudge_PTZEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PTZ::ModeJudge_PTZ() &rArr; FlashVar::save() &rArr; Line&lang;unsigned short&rang;::append(unsigned short) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::save()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doubleKickJudge::doubleKickVal(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ptz_task()
</UL>

<P><STRONG><a name="[12c]"></a>PTZ::Ptz_Task_Init()</STRONG> (Thumb, 1590 bytes, Stack size 144 bytes, ptz_task.o(.text._ZN3PTZ13Ptz_Task_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = PTZ::Ptz_Task_Init() &rArr; FlashVar::read() &rArr; FlashVar::read(unsigned*) &rArr; Line&lang;unsigned short&rang;::append(unsigned short) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::setPlanNum(int)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator =(float*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, CAN_TypeDef*, unsigned)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getMotorCurrentLimit()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getMotorSpeedLimit()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::setZeroValue(unsigned short)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::link(unsigned char*, unsigned char, unsigned short)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::fbValUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[162]"></a>PTZ::Modeswitch_run()</STRONG> (Thumb, 2512 bytes, Stack size 176 bytes, ptz_task.o(.text._ZN3PTZ14Modeswitch_runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = PTZ::Modeswitch_run() &rArr; Motor::ctrlPosition(double, signed char, unsigned char) &rArr; Motor::ctrlSpeed(float, signed char, unsigned char) &rArr; Pid::Calculate(double, int, float*, float) &rArr; Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, int, float*, float)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlPosition(double, signed char, unsigned char)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlCurrent(float, unsigned char)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::change_direction()
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ptz_task()
</UL>

<P><STRONG><a name="[1ae]"></a>PTZ::change_direction()</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, ptz_task.o(.text._ZN3PTZ16change_directionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PTZ::change_direction() &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Modeswitch_run()
</UL>

<P><STRONG><a name="[1b2]"></a>PTZ::PTZ()</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, ptz_task.o(.text._ZN3PTZC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PTZ::PTZ() &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[27d]"></a>PTZ::PTZ__sub_object()</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, ptz_task.o(.text._ZN3PTZC2Ev), UNUSED)

<P><STRONG><a name="[1aa]"></a>Pid::setPlanNum(int)</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, pid.o(.text._ZN3Pid10setPlanNumEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Pid::setPlanNum(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::_FbValuePtr()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Ptz_Task_Init()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::Fire(unsigned short, unsigned short, unsigned short)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::AmmoCover()
</UL>

<P><STRONG><a name="[1b5]"></a>Pid::Clear()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pid.o(.text._ZN3Pid5ClearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Pid::Clear() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, double, int, float*, float)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlSpeed(float, signed char, unsigned char)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlPosition(double, signed char, unsigned char)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::Ammo_offset(float, float, float)
</UL>

<P><STRONG><a name="[1b6]"></a>Pid::Calculate(double, double, int, float*, float)</STRONG> (Thumb, 1708 bytes, Stack size 104 bytes, pid.o(.text._ZN3Pid9CalculateEddiPff))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::LoadCheck(int)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, int, float*, float)
</UL>

<P><STRONG><a name="[1b0]"></a>Pid::Calculate(double, int, float*, float)</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, pid.o(.text._ZN3Pid9CalculateEdiPff))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Pid::Calculate(double, int, float*, float) &rArr; Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::LoadCheck(int)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, double, int, float*, float)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator *()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlSpeed(float, signed char, unsigned char)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlPosition(double, signed char, unsigned char)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Modeswitch_run()
</UL>

<P><STRONG><a name="[1b7]"></a>Pid::LoadCheck(int)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, pid.o(.text._ZN3Pid9LoadCheckEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Pid::LoadCheck(int) &rArr; _FbValuePtr::operator !()
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator !()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, int, float*, float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, double, int, float*, float)
</UL>

<P><STRONG><a name="[1b8]"></a>Pid::Pid(int)</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, pid.o(.text._ZN3PidC2Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Pid::Pid(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::_FbValuePtr()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::Pwm(GPIO_TypeDef*, unsigned short, TIM_TypeDef*, unsigned char)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, CAN_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[27e]"></a>Pid::Pid__sub_object(int)</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, pid.o(.text._ZN3PidC2Ei), UNUSED)

<P><STRONG><a name="[1ba]"></a>Pwm::Pwm(GPIO_TypeDef*, unsigned short, TIM_TypeDef*, unsigned char)</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, pwm.o(.text._ZN3PwmC2EP12GPIO_TypeDeftP11TIM_TypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Pwm::Pwm(GPIO_TypeDef*, unsigned short, TIM_TypeDef*, unsigned char) &rArr; Pid::Pid(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid(int)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PidParam::_PidParam__sub_object()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16judge_timBitSitet
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13judge_BitSitet
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[27f]"></a>Pwm::Pwm__sub_object(GPIO_TypeDef*, unsigned short, TIM_TypeDef*, unsigned char)</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, pwm.o(.text._ZN3PwmC2EP12GPIO_TypeDeftP11TIM_TypeDefh), UNUSED)

<P><STRONG><a name="[1bc]"></a>_RC::handleData(const volatile unsigned char*)</STRONG> (Thumb, 592 bytes, Stack size 24 bytes, dbus.o(.text._ZN3_RC10handleDataEPVKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _RC::handleData(const volatile unsigned char*) &rArr; my_deathzoom(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_deathzoom(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::run_1000Hz()
</UL>

<P><STRONG><a name="[140]"></a>_RC::run_1000Hz()</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, dbus.o(.text._ZN3_RC10run_1000HzEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _RC::run_1000Hz() &rArr; _RC::taskSchedule() &rArr; _RC::remoteUpdate() &rArr; KeyProcess::keyHandle(unsigned short) &rArr; KeyProcess::keyTravel(unsigned short, unsigned short, unsigned short, unsigned) &rArr; KeyProcess::disable() &rArr; KeyProcess::preRelease()
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeIntervalFrom(unsigned long long)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::keyHandle(unsigned short)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::taskSchedule()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::handleData(const volatile unsigned char*)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_1000Hz()
</UL>

<P><STRONG><a name="[1c0]"></a>_RC::Dbus_Config()</STRONG> (Thumb, 368 bytes, Stack size 136 bytes, dbus.o(.text._ZN3_RC11Dbus_ConfigEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _RC::Dbus_Config() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::init()
</UL>

<P><STRONG><a name="[1c4]"></a>_RC::remoteUpdate()</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dbus.o(.text._ZN3_RC12remoteUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _RC::remoteUpdate() &rArr; KeyProcess::keyHandle(unsigned short) &rArr; KeyProcess::keyTravel(unsigned short, unsigned short, unsigned short, unsigned) &rArr; KeyProcess::disable() &rArr; KeyProcess::preRelease()
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::keyHandle(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::taskSchedule()
</UL>

<P><STRONG><a name="[1be]"></a>_RC::taskSchedule()</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, dbus.o(.text._ZN3_RC12taskScheduleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _RC::taskSchedule() &rArr; _RC::remoteUpdate() &rArr; KeyProcess::keyHandle(unsigned short) &rArr; KeyProcess::keyTravel(unsigned short, unsigned short, unsigned short, unsigned) &rArr; KeyProcess::disable() &rArr; KeyProcess::preRelease()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::rstCount()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::remoteUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::run_1000Hz()
</UL>

<P><STRONG><a name="[12d]"></a>_RC::init()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dbus.o(.text._ZN3_RC4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _RC::init() &rArr; _RC::Dbus_Config() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::Dbus_Config()
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[1c5]"></a>_RC::rstCount()</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, dbus.o(.text._ZN3_RC8rstCountEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _RC::rstCount()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SystemResetv
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::taskSchedule()
</UL>

<P><STRONG><a name="[1ca]"></a>Fire::getFireLimit()</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, fire_task.o(.text._ZN4Fire12getFireLimitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Fire::getFireLimit()
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::ModeJudge_Fire()
</UL>

<P><STRONG><a name="[1ce]"></a>Fire::jgmtHeatCalc()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fire_task.o(.text._ZN4Fire12jgmtHeatCalcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Fire::jgmtHeatCalc()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::fireload()
</UL>

<P><STRONG><a name="[1c7]"></a>Fire::friction_ctrl()</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, fire_task.o(.text._ZN4Fire13friction_ctrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Fire::friction_ctrl() &rArr; Motor::ctrlSpeed(float, signed char, unsigned char) &rArr; Pid::Calculate(double, int, float*, float) &rArr; Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlSpeed(float, signed char, unsigned char)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::frictionSpdLimit()
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::ModeJudge_Fire()
</UL>

<P><STRONG><a name="[169]"></a>Fire::ModeJudge_Fire()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fire_task.o(.text._ZN4Fire14ModeJudge_FireEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Fire::ModeJudge_Fire() &rArr; Fire::fireload() &rArr; Motor::ctrlPosition(double, signed char, unsigned char) &rArr; Motor::ctrlSpeed(float, signed char, unsigned char) &rArr; Pid::Calculate(double, int, float*, float) &rArr; Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::fireload()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::friction_ctrl()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::getFireLimit()
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire_Task()
</UL>

<P><STRONG><a name="[1cf]"></a>Fire::fireSpeedSwitch()</STRONG> (Thumb, 1184 bytes, Stack size 16 bytes, fire_task.o(.text._ZN4Fire15fireSpeedSwitchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Fire::fireSpeedSwitch()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::fireload()
</UL>

<P><STRONG><a name="[1c8]"></a>Fire::frictionSpdLimit()</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, fire_task.o(.text._ZN4Fire16frictionSpdLimitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Fire::frictionSpdLimit() &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::friction_ctrl()
</UL>

<P><STRONG><a name="[1cd]"></a>Fire::sprocketHeatCalc()</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, fire_task.o(.text._ZN4Fire16sprocketHeatCalcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Fire::sprocketHeatCalc() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::fireload()
</UL>

<P><STRONG><a name="[1cb]"></a>Fire::fireload()</STRONG> (Thumb, 1536 bytes, Stack size 32 bytes, fire_task.o(.text._ZN4Fire8fireloadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Fire::fireload() &rArr; Motor::ctrlPosition(double, signed char, unsigned char) &rArr; Motor::ctrlSpeed(float, signed char, unsigned char) &rArr; Pid::Calculate(double, int, float*, float) &rArr; Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlPosition(double, signed char, unsigned char)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::sprocketHeatCalc()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::fireSpeedSwitch()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::jgmtHeatCalc()
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::ModeJudge_Fire()
</UL>

<P><STRONG><a name="[1d0]"></a>Fire::Fire(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 508 bytes, Stack size 80 bytes, fire_task.o(.text._ZN4FireC2Ettt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Fire::Fire(unsigned short, unsigned short, unsigned short) &rArr; Pid::setPlanNum(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::setPlanNum(int)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator =(short*)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator =(float*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, CAN_TypeDef*, unsigned)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getMotorSpeedLimit()
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[280]"></a>Fire::Fire__sub_object(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 508 bytes, Stack size 80 bytes, fire_task.o(.text._ZN4FireC2Ettt), UNUSED)

<P><STRONG><a name="[21a]"></a>Line&lang;unsigned char*&rang;::next()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, imu.o(.text._ZN4LineIPhE4nextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Line&lang;unsigned char*&rang;::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::save()
</UL>

<P><STRONG><a name="[219]"></a>Line&lang;unsigned char*&rang;::reset()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, imu.o(.text._ZN4LineIPhE5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Line&lang;unsigned char*&rang;::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::save()
</UL>

<P><STRONG><a name="[1d2]"></a>Line&lang;unsigned char*&rang;::append(unsigned char*)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, imu_task.o(.text._ZN4LineIPhE6appendES0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Line&lang;unsigned char*&rang;::append(unsigned char*) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node&lang;unsigned char*&rang;::Node__sub_object(unsigned char*)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node&lang;unsigned char*&rang;::append(Node&lang;unsigned char*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::link(unsigned char*, unsigned char, unsigned short)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::insert(unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[1d5]"></a>Line&lang;unsigned char*&rang;::insert(unsigned, unsigned char*)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, imu_task.o(.text._ZN4LineIPhE6insertEjS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Line&lang;unsigned char*&rang;::insert(unsigned, unsigned char*) &rArr; Line&lang;unsigned char*&rang;::append(unsigned char*) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node&lang;unsigned char*&rang;::Node__sub_object(unsigned char*)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node&lang;unsigned char*&rang;::append(Node&lang;unsigned char*&rang;*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::append(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::link(unsigned char*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[21c]"></a>Line&lang;unsigned char*&rang;::Line__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, flash_var.o(.text._ZN4LineIPhEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Line&lang;unsigned char*&rang;::Line__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::FlashVar__sub_object(void(*)(unsigned*, unsigned), unsigned*(*)())
</UL>

<P><STRONG><a name="[1d6]"></a>Line&lang;unsigned char*&rang;::~Line__sub_object()</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, flash_var.o(.text._ZN4LineIPhED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Line&lang;unsigned char*&rang;::~Line__sub_object() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::~FlashVar__sub_object()
</UL>

<P><STRONG><a name="[218]"></a>Line&lang;unsigned char*&rang;::operator [](unsigned)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, imu.o(.text._ZN4LineIPhEixEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Line&lang;unsigned char*&rang;::operator [](unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read(unsigned*)
</UL>

<P><STRONG><a name="[213]"></a>Line&lang;unsigned short&rang;::next()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, imu.o(.text._ZN4LineItE4nextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Line&lang;unsigned short&rang;::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::indexOfID(unsigned short)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::save()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read(unsigned*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::link(unsigned char*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[212]"></a>Line&lang;unsigned short&rang;::reset()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, imu.o(.text._ZN4LineItE5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Line&lang;unsigned short&rang;::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::indexOfID(unsigned short)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::save()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read(unsigned*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::link(unsigned char*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[1d7]"></a>Line&lang;unsigned short&rang;::append(unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, imu.o(.text._ZN4LineItE6appendEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Line&lang;unsigned short&rang;::append(unsigned short) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node&lang;unsigned short&rang;::Node__sub_object(unsigned short)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node&lang;unsigned short&rang;::append(Node&lang;unsigned short&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::save()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read(unsigned*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::link(unsigned char*, unsigned char, unsigned short)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::insert(unsigned, unsigned short)
</UL>

<P><STRONG><a name="[1da]"></a>Line&lang;unsigned short&rang;::insert(unsigned, unsigned short)</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, imu_task.o(.text._ZN4LineItE6insertEjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Line&lang;unsigned short&rang;::insert(unsigned, unsigned short) &rArr; Line&lang;unsigned short&rang;::append(unsigned short) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node&lang;unsigned short&rang;::Node__sub_object(unsigned short)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node&lang;unsigned short&rang;::append(Node&lang;unsigned short&rang;*)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::append(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::link(unsigned char*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[215]"></a>Line&lang;unsigned short&rang;::Line__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, imu.o(.text._ZN4LineItEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Line&lang;unsigned short&rang;::Line__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::save()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read(unsigned*)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::FlashVar__sub_object(void(*)(unsigned*, unsigned), unsigned*(*)())
</UL>

<P><STRONG><a name="[1db]"></a>Line&lang;unsigned short&rang;::~Line__sub_object()</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, imu.o(.text._ZN4LineItED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Line&lang;unsigned short&rang;::~Line__sub_object() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::save()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read(unsigned*)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::~FlashVar__sub_object()
</UL>

<P><STRONG><a name="[217]"></a>Line&lang;unsigned short&rang;::operator [](unsigned)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, imu.o(.text._ZN4LineItEixEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Line&lang;unsigned short&rang;::operator [](unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::save()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read(unsigned*)
</UL>

<P><STRONG><a name="[1d4]"></a>Node&lang;unsigned char*&rang;::append(Node&lang;unsigned char*&rang;*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, imu_task.o(.text._ZN4NodeIPhE6appendEPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Node&lang;unsigned char*&rang;::append(Node&lang;unsigned char*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::insert(unsigned, unsigned char*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::append(unsigned char*)
</UL>

<P><STRONG><a name="[1d3]"></a>Node&lang;unsigned char*&rang;::Node__sub_object(unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, imu_task.o(.text._ZN4NodeIPhEC2ES0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Node&lang;unsigned char*&rang;::Node__sub_object(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::insert(unsigned, unsigned char*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::append(unsigned char*)
</UL>

<P><STRONG><a name="[1d9]"></a>Node&lang;unsigned short&rang;::append(Node&lang;unsigned short&rang;*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, imu.o(.text._ZN4NodeItE6appendEPS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Node&lang;unsigned short&rang;::append(Node&lang;unsigned short&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::append(unsigned short)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::insert(unsigned, unsigned short)
</UL>

<P><STRONG><a name="[1d8]"></a>Node&lang;unsigned short&rang;::Node__sub_object(unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, imu.o(.text._ZN4NodeItEC2Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Node&lang;unsigned short&rang;::Node__sub_object(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::append(unsigned short)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::insert(unsigned, unsigned short)
</UL>

<P><STRONG><a name="[176]"></a>Cycle::getCycleT()</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cycle.o(.text._ZN5Cycle9getCycleTEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, double, int, float*, float)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::getOffset()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::init()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_IMU_update(bool)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::keyHandle(unsigned short)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::getOffset()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::sprocketHeatCalc()
</UL>

<P><STRONG><a name="[1b9]"></a>Cycle::Cycle__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pid.o(.text._ZN5CycleC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid(int)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::ImuCalc()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::Fire(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[12b]"></a>Lpf2p::SetCutoffFreq(float, float)</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, filter.o(.text._ZN5Lpf2p13SetCutoffFreqEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Lpf2p::SetCutoffFreq(float, float) &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
</UL>

<P><STRONG><a name="[1de]"></a>Lpf2p::Apply(float)</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, filter.o(.text._ZN5Lpf2p5ApplyEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Lpf2p::Apply(float) &rArr; __ARM_isinff
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
</UL>

<P><STRONG><a name="[1e3]"></a>Motor::isDJIMotor(CAN_TypeDef*, unsigned)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, motor.o(.text._ZN5Motor10isDJIMotorEP11CAN_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor::isDJIMotor(CAN_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::motorInit()
</UL>

<P><STRONG><a name="[13f]"></a>Motor::sendCanMsg()</STRONG> (Thumb, 610 bytes, Stack size 32 bytes, motor.o(.text._ZN5Motor10sendCanMsgEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Motor::sendCanMsg() &rArr; canTx(float*, CAN_TypeDef*, unsigned) &rArr; delayUs(unsigned) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTx(float*, CAN_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[1b1]"></a>Motor::ctrlCurrent(float, unsigned char)</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, motor.o(.text._ZN5Motor11ctrlCurrentEfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Motor::ctrlCurrent(float, unsigned char) &rArr; Motor::overHeatProtect(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::overHeatProtect(short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::motorPowerOut(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlSpeed(float, signed char, unsigned char)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Modeswitch_run()
</UL>

<P><STRONG><a name="[1af]"></a>Motor::ctrlPosition(double, signed char, unsigned char)</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, motor.o(.text._ZN5Motor12ctrlPositionEdah))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Motor::ctrlPosition(double, signed char, unsigned char) &rArr; Motor::ctrlSpeed(float, signed char, unsigned char) &rArr; Pid::Calculate(double, int, float*, float) &rArr; Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, int, float*, float)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlSpeed(float, signed char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Modeswitch_run()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::fireload()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::Ammo_open()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::Ammo_offset(float, float, float)
</UL>

<P><STRONG><a name="[1a9]"></a>Motor::setZeroValue(unsigned short)</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, motor.o(.text._ZN5Motor12setZeroValueEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Motor::setZeroValue(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Ptz_Task_Init()
</UL>

<P><STRONG><a name="[1e1]"></a>Motor::motorPowerOut(float)</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, motor.o(.text._ZN5Motor13motorPowerOutEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor::motorPowerOut(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlCurrent(float, unsigned char)
</UL>

<P><STRONG><a name="[191]"></a>Motor::getEnableMotor()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, motor.o(.text._ZN5Motor14getEnableMotorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::getEnableMotor()
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSelfCheck::run()
</UL>

<P><STRONG><a name="[1e0]"></a>Motor::overHeatProtect(short)</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, motor.o(.text._ZN5Motor15overHeatProtectEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Motor::overHeatProtect(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlCurrent(float, unsigned char)
</UL>

<P><STRONG><a name="[1f3]"></a>Motor::setPowerOutLimit(float*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(.text._ZN5Motor16setPowerOutLimitEPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor::setPowerOutLimit(float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::motorOutput()
</UL>

<P><STRONG><a name="[1a8]"></a>Motor::getMotorSpeedLimit()</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, motor.o(.text._ZN5Motor18getMotorSpeedLimitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::getMotorSpeedLimit()
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Ptz_Task_Init()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::Fire(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[1a7]"></a>Motor::getMotorCurrentLimit()</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, motor.o(.text._ZN5Motor20getMotorCurrentLimitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::getMotorCurrentLimit()
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Ptz_Task_Init()
</UL>

<P><STRONG><a name="[19b]"></a>Motor::getType()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, motor.o(.text._ZN5Motor7getTypeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::getType()
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::Motor_Information_Calculate(unsigned char, CanRxMsg*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can::Motor_Offset(unsigned char, CanRxMsg*)
</UL>

<P><STRONG><a name="[1c9]"></a>Motor::ctrlSpeed(float, signed char, unsigned char)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, motor.o(.text._ZN5Motor9ctrlSpeedEfah))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Motor::ctrlSpeed(float, signed char, unsigned char) &rArr; Pid::Calculate(double, int, float*, float) &rArr; Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, int, float*, float)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlCurrent(float, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlPosition(double, signed char, unsigned char)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::motorOutput()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::friction_ctrl()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::Ammo_open()
</UL>

<P><STRONG><a name="[1e2]"></a>Motor::motorInit()</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, motor.o(.text._ZN5Motor9motorInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor::motorInit() &rArr; Motor::isDJIMotor(CAN_TypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::isDJIMotor(CAN_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, CAN_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[1a6]"></a>Motor::Motor(MotorType, CAN_TypeDef*, unsigned)</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, motor.o(.text._ZN5MotorC2E9MotorTypeP11CAN_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Motor::Motor(MotorType, CAN_TypeDef*, unsigned) &rArr; Pid::Pid(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid(int)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator =(short*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator =(int*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::motorInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Ptz_Task_Init()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::Fire(unsigned short, unsigned short, unsigned short)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::AmmoCover()
</UL>

<P><STRONG><a name="[281]"></a>Motor::Motor__sub_object(MotorType, CAN_TypeDef*, unsigned)</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, motor.o(.text._ZN5MotorC2E9MotorTypeP11CAN_TypeDefj), UNUSED)

<P><STRONG><a name="[1e5]"></a>Power::getPowerKp()</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, power.o(.text._ZN5Power10getPowerKpEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Power::getPowerKp() &rArr; Power::getPowerLimit() &rArr; Power::setPowerLimit(float, float, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::underVoltageProtection()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::powerOverFlowCal()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::getPowerLimit()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::powerCtrlUpdate()
</UL>

<P><STRONG><a name="[cd]"></a>Power::myPowerCanRx(CanRxMsg)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, power.o(.text._ZN5Power12myPowerCanRxE8CanRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Power::myPowerCanRx(CanRxMsg)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1e9]"></a>Power::myPowerCanTx()</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, power.o(.text._ZN5Power12myPowerCanTxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Power::myPowerCanTx() &rArr; canTx(unsigned char*, CAN_TypeDef*, unsigned) &rArr; delayUs(unsigned) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTx(unsigned char*, CAN_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::powerCtrlUpdate()
</UL>

<P><STRONG><a name="[1e6]"></a>Power::getPowerLimit()</STRONG> (Thumb, 660 bytes, Stack size 40 bytes, power.o(.text._ZN5Power13getPowerLimitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Power::getPowerLimit() &rArr; Power::setPowerLimit(float, float, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::setPowerLimit(float, float, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::getPowerKp()
</UL>

<P><STRONG><a name="[1ea]"></a>Power::setPowerLimit(float, float, unsigned char)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, power.o(.text._ZN5Power13setPowerLimitEffh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Power::setPowerLimit(float, float, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::getPowerLimit()
</UL>

<P><STRONG><a name="[1e7]"></a>Power::powerOverFlowCal()</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, power.o(.text._ZN5Power16powerOverFlowCalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Power::powerOverFlowCal()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::getPowerKp()
</UL>

<P><STRONG><a name="[1f4]"></a>Power::myPowerOfflineJudge()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, power.o(.text._ZN5Power19myPowerOfflineJudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Power::myPowerOfflineJudge()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::powerCtrlUpdate()
</UL>

<P><STRONG><a name="[1e8]"></a>Power::underVoltageProtection()</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, power.o(.text._ZN5Power22underVoltageProtectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Power::underVoltageProtection()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::getPowerKp()
</UL>

<P><STRONG><a name="[232]"></a>Power::Power__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, power.o(.text._ZN5PowerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Power::Power__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[1eb]"></a>SMOOTH::smooth_cos(float, float)</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, smooth_start.o(.text._ZN6SMOOTH10smooth_cosEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SMOOTH::smooth_cos(float, float) &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::motorOutput()
</UL>

<P><STRONG><a name="[22f]"></a>SMOOTH::SMOOTH__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, smooth_start.o(.text._ZN6SMOOTHC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SMOOTH::SMOOTH__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[1ec]"></a>Bl24Cxx::Bl24Cxx(unsigned char, GPIO_TypeDef*, unsigned short, unsigned short, GPIO_TypeDef*, I2C_TypeDef*)</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, bl24c512a.o(.text._ZN7Bl24CxxC2EhP12GPIO_TypeDefttS1_P11I2C_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Bl24Cxx::Bl24Cxx(unsigned char, GPIO_TypeDef*, unsigned short, unsigned short, GPIO_TypeDef*, I2C_TypeDef*) &rArr; Softiic::Softiic__sub_object(GPIO_TypeDef*, unsigned short, unsigned short, I2C_TypeDef*, unsigned, GPIO_TypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::Softiic__sub_object(GPIO_TypeDef*, unsigned short, unsigned short, I2C_TypeDef*, unsigned, GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[282]"></a>Bl24Cxx::Bl24Cxx__sub_object(unsigned char, GPIO_TypeDef*, unsigned short, unsigned short, GPIO_TypeDef*, I2C_TypeDef*)</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, bl24c512a.o(.text._ZN7Bl24CxxC2EhP12GPIO_TypeDefttS1_P11I2C_TypeDef), UNUSED)

<P><STRONG><a name="[1f1]"></a>Chassis::ChNoFollow()</STRONG> (Thumb, 400 bytes, Stack size 20 bytes, chassis_task.o(.text._ZN7Chassis10ChNoFollowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Chassis::ChNoFollow()
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
</UL>

<P><STRONG><a name="[120]"></a>Chassis::chassis_run()</STRONG> (Thumb, 3348 bytes, Stack size 344 bytes, chassis_task.o(.text._ZN7Chassis11chassis_runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = Chassis::chassis_run() &rArr; Chassis::randomspeed_gyro() &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Calculate(double, int, float*, float)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpf2p::Apply(float)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::randomspeed_gyro()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::getGimbalAngle()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::SpeedingGyro()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::ChNoFollow()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Task()
</UL>

<P><STRONG><a name="[121]"></a>Chassis::motorOutput()</STRONG> (Thumb, 648 bytes, Stack size 32 bytes, chassis_task.o(.text._ZN7Chassis11motorOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Chassis::motorOutput() &rArr; Motor::ctrlSpeed(float, signed char, unsigned char) &rArr; Pid::Calculate(double, int, float*, float) &rArr; Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMOOTH::smooth_cos(float, float)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlSpeed(float, signed char, unsigned char)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::setPowerOutLimit(float*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::powerCtrlUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Task()
</UL>

<P><STRONG><a name="[1ef]"></a>Chassis::SpeedingGyro()</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, chassis_task.o(.text._ZN7Chassis12SpeedingGyroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Chassis::SpeedingGyro() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
</UL>

<P><STRONG><a name="[220]"></a>Chassis::judgeIfMoving()</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, chassis_task.o(.text._ZN7Chassis13judgeIfMovingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chassis::judgeIfMoving()
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::auto_close()
</UL>

<P><STRONG><a name="[111]"></a>Chassis::getGimbalAngle()</STRONG> (Thumb, 204 bytes, Stack size 4 bytes, chassis_task.o(.text._ZN7Chassis14getGimbalAngleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Chassis::getGimbalAngle()
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_Ctrl()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
</UL>

<P><STRONG><a name="[1f2]"></a>Chassis::powerCtrlUpdate()</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, chassis_task.o(.text._ZN7Chassis15powerCtrlUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Chassis::powerCtrlUpdate() &rArr; Power::myPowerCanTx() &rArr; canTx(unsigned char*, CAN_TypeDef*, unsigned) &rArr; delayUs(unsigned) &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::myPowerOfflineJudge()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::myPowerCanTx()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::getPowerKp()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doubleKickJudge::doubleKickVal(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::motorOutput()
</UL>

<P><STRONG><a name="[1f0]"></a>Chassis::randomspeed_gyro()</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, chassis_task.o(.text._ZN7Chassis16randomspeed_gyroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Chassis::randomspeed_gyro() &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
</UL>

<P><STRONG><a name="[1f8]"></a>Chassis::Chassis()</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, chassis_task.o(.text._ZN7ChassisC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Chassis::Chassis() &rArr; Pid::setPlanNum(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::setPlanNum(int)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator =(short*)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator =(float*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, CAN_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[283]"></a>Chassis::Chassis__sub_object()</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, chassis_task.o(.text._ZN7ChassisC2Ev), UNUSED)

<P><STRONG><a name="[156]"></a>ImuCalc::initalAngle()</STRONG> (Thumb, 860 bytes, Stack size 128 bytes, imu.o(.text._ZN7ImuCalc11initalAngleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ImuCalc::initalAngle() &rArr; AHRS_init &rArr; angle_to_quat &rArr; AHRS_sinf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::caliSolve()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::gyroAccUpdate()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::getOffset()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::getOffset()
</UL>

<P><STRONG><a name="[1fc]"></a>ImuCalc::TDT_accFilter()</STRONG> (Thumb, 344 bytes, Stack size 36 bytes, imu.o(.text._ZN7ImuCalc13TDT_accFilterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ImuCalc::TDT_accFilter()
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_IMU_update(bool)
</UL>

<P><STRONG><a name="[6f]"></a>ImuCalc::gyroAccUpdate()</STRONG> (Thumb, 152 bytes, Stack size 4 bytes, imu.o(.text._ZN7ImuCalc13gyroAccUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ImuCalc::gyroAccUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_IMU_update(bool)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::initalAngle()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::gyroAccUpdate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.rodata._ZTV7ImuCalc)
</UL>
<P><STRONG><a name="[15a]"></a>ImuCalc::TDT_IMU_update(bool)</STRONG> (Thumb, 2076 bytes, Stack size 224 bytes, imu.o(.text._ZN7ImuCalc14TDT_IMU_updateEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ImuCalc::TDT_IMU_update(bool) &rArr; AHRS_update &rArr; accel_comple_filter &rArr; accel_update_kp_ki &rArr; AHRS_invSqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTimeUs()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::caliSolve()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::ImuCrossRoundHandle(_eulerAngle&, _eulerAngle&, _eulerAngle&, angleRound&)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_gyroFilter()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::gyroAccUpdate()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_accFilter()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt(float)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan2(float, float)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_update
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Task()
</UL>

<P><STRONG><a name="[1fd]"></a>ImuCalc::TDT_gyroFilter()</STRONG> (Thumb, 396 bytes, Stack size 36 bytes, imu.o(.text._ZN7ImuCalc14TDT_gyroFilterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ImuCalc::TDT_gyroFilter()
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_IMU_update(bool)
</UL>

<P><STRONG><a name="[154]"></a>ImuCalc::setAccScaleFactor(float(*)[3])</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, imu.o(.text._ZN7ImuCalc17setAccScaleFactorEPA3_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ImuCalc::setAccScaleFactor(float(*)[3])
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::ImuCalc()
</UL>

<P><STRONG><a name="[153]"></a>ImuCalc::setGyroScaleFactor(float(*)[3])</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, imu.o(.text._ZN7ImuCalc18setGyroScaleFactorEPA3_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ImuCalc::setGyroScaleFactor(float(*)[3])
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::ImuCalc()
</UL>

<P><STRONG><a name="[1ff]"></a>ImuCalc::ImuCrossRoundHandle(_eulerAngle&, _eulerAngle&, _eulerAngle&, angleRound&)</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, imu.o(.text._ZN7ImuCalc19ImuCrossRoundHandleER11_eulerAngleS1_S1_R10angleRound))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ImuCalc::ImuCrossRoundHandle(_eulerAngle&, _eulerAngle&, _eulerAngle&, angleRound&)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_IMU_update(bool)
</UL>

<P><STRONG><a name="[202]"></a>ImuCalc::gyroAutoCalibration()</STRONG> (Thumb, 690 bytes, Stack size 12 bytes, imu.o(.text._ZN7ImuCalc19gyroAutoCalibrationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ImuCalc::gyroAutoCalibration()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::getOffset()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::getOffset()
</UL>

<P><STRONG><a name="[71]"></a>ImuCalc::init()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, imu.o(.text._ZN7ImuCalc4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ImuCalc::init() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::init(unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.rodata._ZTV7ImuCalc)
</UL>
<P><STRONG><a name="[1f9]"></a>ImuCalc::caliSolve()</STRONG> (Thumb, 300 bytes, Stack size 12 bytes, imu.o(.text._ZN7ImuCalc9caliSolveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ImuCalc::caliSolve()
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_IMU_update(bool)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::initalAngle()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::gyroAccUpdate()
</UL>

<P><STRONG><a name="[70]"></a>ImuCalc::getOffset()</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, imu.o(.text._ZN7ImuCalc9getOffsetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ImuCalc::getOffset() &rArr; ImuCalc::initalAngle() &rArr; AHRS_init &rArr; angle_to_quat &rArr; AHRS_sinf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs(unsigned)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::save()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::gyroAutoCalibration()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::initalAngle()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::setError(signed char, LedES)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::show(unsigned char)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdgFeed()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SystemResetv
</UL>
<BR>[Address Reference Count : 2]<UL><LI> imu.o(.rodata._ZTV7ImuCalc)
<LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[204]"></a>ImuCalc::ImuCalc()</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, imu.o(.text._ZN7ImuCalcC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::setGyroScaleFactor(float(*)[3])
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::setAccScaleFactor(float(*)[3])
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[209]"></a>ImuCalc::ImuCalc__sub_object()</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, imu.o(.text._ZN7ImuCalcC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ImuCalc::ImuCalc__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::Mpu6050(GPIO_TypeDef*, unsigned short, unsigned short, GPIO_TypeDef*, I2C_TypeDef*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::MultiImu__sub_object()
</UL>

<P><STRONG><a name="[205]"></a>Mpu6050::Mpu6050_Read()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mpu6050.o(.text._ZN7Mpu605012Mpu6050_ReadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Mpu6050::Mpu6050_Read() &rArr; Mpu6050::Mpu6050_Read_Gyro_Data() &rArr; IIC::iicRegReadByte(unsigned char, unsigned char) &rArr; IIC::iicRegReadData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::Mpu6050_Read_Gyro_Data()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::Mpu6050_Read_Acc_Data()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::gyroAccUpdate()
</UL>

<P><STRONG><a name="[73]"></a>Mpu6050::gyroAccUpdate()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mpu6050.o(.text._ZN7Mpu605013gyroAccUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Mpu6050::gyroAccUpdate() &rArr; Mpu6050::Mpu6050_Read() &rArr; Mpu6050::Mpu6050_Read_Gyro_Data() &rArr; IIC::iicRegReadByte(unsigned char, unsigned char) &rArr; IIC::iicRegReadData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::Mpu6050_Read()
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-32} to Mpu6050::gyroAccUpdate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[206]"></a>Mpu6050::Mpu6050_Read_Acc_Data()</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, mpu6050.o(.text._ZN7Mpu605021Mpu6050_Read_Acc_DataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Mpu6050::Mpu6050_Read_Acc_Data() &rArr; IIC::iicRegReadByte(unsigned char, unsigned char) &rArr; IIC::iicRegReadData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::iicRegReadByte(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::Mpu6050_Read()
</UL>

<P><STRONG><a name="[207]"></a>Mpu6050::Mpu6050_Read_Gyro_Data()</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, mpu6050.o(.text._ZN7Mpu605022Mpu6050_Read_Gyro_DataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Mpu6050::Mpu6050_Read_Gyro_Data() &rArr; IIC::iicRegReadByte(unsigned char, unsigned char) &rArr; IIC::iicRegReadData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::iicRegReadByte(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::Mpu6050_Read()
</UL>

<P><STRONG><a name="[208]"></a>Mpu6050::init(unsigned short, unsigned short)</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, mpu6050.o(.text._ZN7Mpu60504initEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Mpu6050::init(unsigned short, unsigned short) &rArr; IIC::iicRegWriteByte(unsigned char, unsigned char, unsigned char) &rArr; IIC::iicRegWriteData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs(unsigned)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::init()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::iicRegWriteByte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::init()
</UL>

<P><STRONG><a name="[72]"></a>Mpu6050::init()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(.text._ZN7Mpu60504initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Mpu6050::init() &rArr; Mpu6050::init(unsigned short, unsigned short) &rArr; IIC::iicRegWriteByte(unsigned char, unsigned char, unsigned char) &rArr; IIC::iicRegWriteData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::init(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-32} to Mpu6050::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[151]"></a>Mpu6050::Mpu6050(GPIO_TypeDef*, unsigned short, unsigned short, GPIO_TypeDef*, I2C_TypeDef*)</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, mpu6050.o(.text._ZN7Mpu6050C2EP12GPIO_TypeDefttS1_P11I2C_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Mpu6050::Mpu6050(GPIO_TypeDef*, unsigned short, unsigned short, GPIO_TypeDef*, I2C_TypeDef*) &rArr; ImuCalc::ImuCalc__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::ImuCalc__sub_object()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::Softiic__sub_object(GPIO_TypeDef*, unsigned short, unsigned short, I2C_TypeDef*, unsigned, GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit()
</UL>

<P><STRONG><a name="[284]"></a>Mpu6050::Mpu6050__sub_object(GPIO_TypeDef*, unsigned short, unsigned short, GPIO_TypeDef*, I2C_TypeDef*)</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, mpu6050.o(.text._ZN7Mpu6050C2EP12GPIO_TypeDefttS1_P11I2C_TypeDef), UNUSED)

<P><STRONG><a name="[6b]"></a>Softiic::iicSendByte(unsigned char)</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, iic.o(.text._ZN7Softiic11iicSendByteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Softiic::iicSendByte(unsigned char) &rArr; Softiic::iicSoftDelay()
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaRead()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaL()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaH()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sclL()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sclH()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicSoftDelay()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bl24c512a.o(.rodata._ZTV7Bl24Cxx)
<LI> iic.o(.rodata._ZTV7Softiic)
<LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[66]"></a>Softiic::iicCheckBusy()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, iic.o(.text._ZN7Softiic12iicCheckBusyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Softiic::iicCheckBusy() &rArr; Softiic::iicSoftDelay()
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaRead()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaH()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sclH()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicSoftDelay()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bl24c512a.o(.rodata._ZTV7Bl24Cxx)
<LI> iic.o(.rodata._ZTV7Softiic)
<LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[20b]"></a>Softiic::iicSoftDelay()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, iic.o(.text._ZN7Softiic12iicSoftDelayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Softiic::iicSoftDelay()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicStart()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicStop()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicReceiveDataByte_NoAck(unsigned char*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicReceiveDataByte_Ack(unsigned char*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicCheckBusy()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicSendByte(unsigned char)
</UL>

<P><STRONG><a name="[69]"></a>Softiic::iicReceiveDataByte_Ack(unsigned char*)</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, iic.o(.text._ZN7Softiic22iicReceiveDataByte_AckEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Softiic::iicReceiveDataByte_Ack(unsigned char*) &rArr; Softiic::iicSoftDelay()
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaRead()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaL()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaH()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sclL()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sclH()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicSoftDelay()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bl24c512a.o(.rodata._ZTV7Bl24Cxx)
<LI> iic.o(.rodata._ZTV7Softiic)
<LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[6a]"></a>Softiic::iicReceiveDataByte_NoAck(unsigned char*)</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, iic.o(.text._ZN7Softiic24iicReceiveDataByte_NoAckEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Softiic::iicReceiveDataByte_NoAck(unsigned char*) &rArr; Softiic::iicSoftDelay()
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaRead()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaH()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sclL()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sclH()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicSoftDelay()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bl24c512a.o(.rodata._ZTV7Bl24Cxx)
<LI> iic.o(.rodata._ZTV7Softiic)
<LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[20e]"></a>Softiic::sclH()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, iic.o(.text._ZN7Softiic4sclHEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Softiic::sclH()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicStart()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicStop()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicReceiveDataByte_NoAck(unsigned char*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicReceiveDataByte_Ack(unsigned char*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicCheckBusy()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicSendByte(unsigned char)
</UL>

<P><STRONG><a name="[20a]"></a>Softiic::sclL()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, iic.o(.text._ZN7Softiic4sclLEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Softiic::sclL()
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicStop()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicReceiveDataByte_NoAck(unsigned char*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicReceiveDataByte_Ack(unsigned char*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicSendByte(unsigned char)
</UL>

<P><STRONG><a name="[20c]"></a>Softiic::sdaH()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, iic.o(.text._ZN7Softiic4sdaHEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Softiic::sdaH()
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicStop()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicReceiveDataByte_NoAck(unsigned char*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicReceiveDataByte_Ack(unsigned char*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicCheckBusy()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicSendByte(unsigned char)
</UL>

<P><STRONG><a name="[20d]"></a>Softiic::sdaL()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, iic.o(.text._ZN7Softiic4sdaLEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Softiic::sdaL()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicStart()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicStop()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicReceiveDataByte_Ack(unsigned char*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicSendByte(unsigned char)
</UL>

<P><STRONG><a name="[6e]"></a>Softiic::iicInit()</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, iic.o(.text._ZN7Softiic7iicInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Softiic::iicInit() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bl24c512a.o(.rodata._ZTV7Bl24Cxx)
<LI> iic.o(.rodata._ZTV7Softiic)
<LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[68]"></a>Softiic::iicStop()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, iic.o(.text._ZN7Softiic7iicStopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Softiic::iicStop() &rArr; Softiic::iicSoftDelay()
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaL()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaH()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sclL()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sclH()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicSoftDelay()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bl24c512a.o(.rodata._ZTV7Bl24Cxx)
<LI> iic.o(.rodata._ZTV7Softiic)
<LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[20f]"></a>Softiic::sdaRead()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, iic.o(.text._ZN7Softiic7sdaReadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Softiic::sdaRead()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicStart()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicReceiveDataByte_NoAck(unsigned char*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicReceiveDataByte_Ack(unsigned char*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicCheckBusy()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicSendByte(unsigned char)
</UL>

<P><STRONG><a name="[6d]"></a>Softiic::iicRAddr(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, iic.o(.text._ZN7Softiic8iicRAddrEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Softiic::iicRAddr(unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bl24c512a.o(.rodata._ZTV7Bl24Cxx)
<LI> iic.o(.rodata._ZTV7Softiic)
<LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[67]"></a>Softiic::iicStart()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, iic.o(.text._ZN7Softiic8iicStartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Softiic::iicStart() &rArr; Softiic::iicSoftDelay()
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaRead()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sdaL()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::sclH()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::iicSoftDelay()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bl24c512a.o(.rodata._ZTV7Bl24Cxx)
<LI> iic.o(.rodata._ZTV7Softiic)
<LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[6c]"></a>Softiic::iicWAddr(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, iic.o(.text._ZN7Softiic8iicWAddrEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Softiic::iicWAddr(unsigned char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bl24c512a.o(.rodata._ZTV7Bl24Cxx)
<LI> iic.o(.rodata._ZTV7Softiic)
<LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[210]"></a>Softiic::Softiic(GPIO_TypeDef*, unsigned short, unsigned short, I2C_TypeDef*, unsigned, GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, iic.o(.text._ZN7SoftiicC2EP12GPIO_TypeDefttP11I2C_TypeDefjS1_j), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC::IIC__sub_object()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13judge_BitSitet
</UL>

<P><STRONG><a name="[1ed]"></a>Softiic::Softiic__sub_object(GPIO_TypeDef*, unsigned short, unsigned short, I2C_TypeDef*, unsigned, GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, iic.o(.text._ZN7SoftiicC2EP12GPIO_TypeDefttP11I2C_TypeDefjS1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Softiic::Softiic__sub_object(GPIO_TypeDef*, unsigned short, unsigned short, I2C_TypeDef*, unsigned, GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::Mpu6050(GPIO_TypeDef*, unsigned short, unsigned short, GPIO_TypeDef*, I2C_TypeDef*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bl24Cxx::Bl24Cxx(unsigned char, GPIO_TypeDef*, unsigned short, unsigned short, GPIO_TypeDef*, I2C_TypeDef*)
</UL>

<P><STRONG><a name="[1ac]"></a>FlashVar::link(unsigned char*, unsigned char, unsigned short)</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, imu_task.o(.text._ZN8FlashVar4linkEPhht))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = FlashVar::link(unsigned char*, unsigned char, unsigned short) &rArr; Line&lang;unsigned short&rang;::insert(unsigned, unsigned short) &rArr; Line&lang;unsigned short&rang;::append(unsigned short) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::append(unsigned short)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::reset()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::next()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::insert(unsigned, unsigned short)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::insert(unsigned, unsigned char*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::append(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Ptz_Task_Init()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void FlashVar::link&lang;_vec3f&rang;(T1&, unsigned short)
</UL>

<P><STRONG><a name="[155]"></a>void FlashVar::link&lang;_vec3f&rang;(T1&, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, imu_task.o(.text._ZN8FlashVar4linkI6_vec3fEEvRT_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = void FlashVar::link&lang;_vec3f&rang;(T1&, unsigned short) &rArr; FlashVar::link(unsigned char*, unsigned char, unsigned short) &rArr; Line&lang;unsigned short&rang;::insert(unsigned, unsigned short) &rArr; Line&lang;unsigned short&rang;::append(unsigned short) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::link(unsigned char*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit()
</UL>

<P><STRONG><a name="[214]"></a>FlashVar::read(unsigned*)</STRONG> (Thumb, 308 bytes, Stack size 80 bytes, imu.o(.text._ZN8FlashVar4readEPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FlashVar::read(unsigned*) &rArr; Line&lang;unsigned short&rang;::append(unsigned short) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::indexOfID(unsigned short)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::operator [](unsigned)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::~Line__sub_object()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::Line__sub_object()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::append(unsigned short)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::reset()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::next()
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::operator [](unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read()
</UL>

<P><STRONG><a name="[1ad]"></a>FlashVar::read()</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, imu.o(.text._ZN8FlashVar4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = FlashVar::read() &rArr; FlashVar::read(unsigned*) &rArr; Line&lang;unsigned short&rang;::append(unsigned short) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read(unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Ptz_Task_Init()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::getOffset()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::getOffset()
</UL>

<P><STRONG><a name="[1a5]"></a>FlashVar::save()</STRONG> (Thumb, 590 bytes, Stack size 136 bytes, imu.o(.text._ZN8FlashVar4saveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = FlashVar::save() &rArr; Line&lang;unsigned short&rang;::append(unsigned short) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::operator [](unsigned)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::~Line__sub_object()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::Line__sub_object()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::append(unsigned short)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::reset()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::next()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::reset()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::getOffset()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::getOffset()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::ModeJudge_PTZ()
</UL>

<P><STRONG><a name="[216]"></a>FlashVar::indexOfID(unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, imu.o(.text._ZN8FlashVar9indexOfIDEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FlashVar::indexOfID(unsigned short) &rArr; Line&lang;unsigned short&rang;::next()
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::reset()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read(unsigned*)
</UL>

<P><STRONG><a name="[21b]"></a>FlashVar::FlashVar__sub_object(void(*)(unsigned*, unsigned), unsigned*(*)())</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, flash_var.o(.text._ZN8FlashVarC2EPFvPjjEPFS0_vE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FlashVar::FlashVar__sub_object(void(*)(unsigned*, unsigned), unsigned*(*)()) &rArr; Line&lang;unsigned short&rang;::Line__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::Line__sub_object()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::Line__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[63]"></a>FlashVar::~FlashVar__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, flash_var.o(.text._ZN8FlashVarD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FlashVar::~FlashVar__sub_object() &rArr; Line&lang;unsigned short&rang;::~Line__sub_object() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::~Line__sub_object()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::~Line__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_var.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[76]"></a>MultiImu::gyroAccUpdate()</STRONG> (Thumb, 1058 bytes, Stack size 48 bytes, multi_imu.o(.text._ZN8MultiImu13gyroAccUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MultiImu::gyroAccUpdate() &rArr; ImuCalc::caliSolve()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::caliSolve()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::gyroAccUpdate()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_imu.o(.rodata._ZTV8MultiImu)
</UL>
<P><STRONG><a name="[78]"></a>MultiImu::init()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, multi_imu.o(.text._ZN8MultiImu4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MultiImu::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_imu.o(.rodata._ZTV8MultiImu)
</UL>
<P><STRONG><a name="[77]"></a>MultiImu::getOffset()</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, multi_imu.o(.text._ZN8MultiImu9getOffsetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = MultiImu::getOffset() &rArr; ImuCalc::initalAngle() &rArr; AHRS_init &rArr; angle_to_quat &rArr; AHRS_sinf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::getCycleT()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs(unsigned)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::save()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::gyroAutoCalibration()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::initalAngle()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::setError(signed char, LedES)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::show(unsigned char)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdgFeed()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::stateShow(unsigned short)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SystemResetv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_imu.o(.rodata._ZTV8MultiImu)
</UL>
<P><STRONG><a name="[150]"></a>MultiImu::MultiImu__sub_object()</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, imu_task.o(.text._ZN8MultiImuC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MultiImu::MultiImu__sub_object() &rArr; ImuCalc::ImuCalc__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::ImuCalc__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit()
</UL>

<P><STRONG><a name="[168]"></a>AmmoCover::auto_close()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ammo_cover_task.o(.text._ZN9AmmoCover10auto_closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AmmoCover::auto_close() &rArr; Chassis::judgeIfMoving()
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::judgeIfMoving()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::Coveropen_Judge()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ammo_Task()
</UL>

<P><STRONG><a name="[166]"></a>AmmoCover::Ammo_offset(float, float, float)</STRONG> (Thumb, 416 bytes, Stack size 72 bytes, ammo_cover_task.o(.text._ZN9AmmoCover11Ammo_offsetEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = AmmoCover::Ammo_offset(float, float, float) &rArr; Motor::ctrlPosition(double, signed char, unsigned char) &rArr; Motor::ctrlSpeed(float, signed char, unsigned char) &rArr; Pid::Calculate(double, int, float*, float) &rArr; Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Clear()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator *()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlPosition(double, signed char, unsigned char)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ammo_Task()
</UL>

<P><STRONG><a name="[21f]"></a>AmmoCover::Coveropen_Judge()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, ammo_cover_task.o(.text._ZN9AmmoCover15Coveropen_JudgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AmmoCover::Coveropen_Judge()
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::auto_close()
</UL>

<P><STRONG><a name="[167]"></a>AmmoCover::Ammo_open()</STRONG> (Thumb, 888 bytes, Stack size 32 bytes, ammo_cover_task.o(.text._ZN9AmmoCover9Ammo_openEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = AmmoCover::Ammo_open() &rArr; Motor::ctrlPosition(double, signed char, unsigned char) &rArr; Motor::ctrlSpeed(float, signed char, unsigned char) &rArr; Pid::Calculate(double, int, float*, float) &rArr; Pid::Calculate(double, double, int, float*, float) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlSpeed(float, signed char, unsigned char)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::ctrlPosition(double, signed char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ammo_Task()
</UL>

<P><STRONG><a name="[221]"></a>AmmoCover::AmmoCover()</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, ammo_cover_task.o(.text._ZN9AmmoCoverC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = AmmoCover::AmmoCover() &rArr; Pid::setPlanNum(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::setPlanNum(int)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator =(short*)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FbValuePtr::operator =(float*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(MotorType, CAN_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[285]"></a>AmmoCover::AmmoCover__sub_object()</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, ammo_cover_task.o(.text._ZN9AmmoCoverC2Ev), UNUSED)

<P><STRONG><a name="[d5]"></a>Judgement::addFullCount()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, judgement.o(.text._ZN9Judgement12addFullCountEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Judgement::addFullCount()
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[222]"></a>Judgement::getJudgeData()</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, judgement.o(.text._ZN9Judgement12getJudgeDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Judgement::getJudgeData() &rArr; Judgement::getLength(Judgement::FrameHeader*)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::getLength(Judgement::FrameHeader*)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::ringQueue()
</UL>

<P><STRONG><a name="[223]"></a>Judgement::getLength(Judgement::FrameHeader*)</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, judgement.o(.text._ZN9Judgement9getLengthEPNS_11FrameHeaderE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Judgement::getLength(Judgement::FrameHeader*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::ringQueue()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::getJudgeData()
</UL>

<P><STRONG><a name="[16a]"></a>Judgement::ringQueue()</STRONG> (Thumb, 1436 bytes, Stack size 48 bytes, judgement.o(.text._ZN9Judgement9ringQueueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Judgement::ringQueue() &rArr; Judgement::getJudgeData() &rArr; Judgement::getLength(Judgement::FrameHeader*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::getLength(Judgement::FrameHeader*)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::getJudgeData()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringQueue()
</UL>

<P><STRONG><a name="[231]"></a>Judgement::Judgement__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, judgement.o(.text._ZN9JudgementC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Judgement::Judgement__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[13e]"></a>StateCtrl::changeVisionError()</STRONG> (Thumb, 1814 bytes, Stack size 48 bytes, state_task.o(.text._ZN9StateCtrl17changeVisionErrorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StateCtrl::changeVisionError()
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDT_Loop_500Hz()
</UL>

<P><STRONG><a name="[225]"></a>StateCtrl::StateCtrl__sub_object()</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, state_task.o(.text._ZN9StateCtrlC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StateCtrl::StateCtrl__sub_object() &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[1bb]"></a>_PidParam::_PidParam__sub_object()</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, pwm.o(.text._ZN9_PidParamC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PidParam::_PidParam__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::Pwm(GPIO_TypeDef*, unsigned short, TIM_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[7b]"></a>__cxxabiv1::__shim_type_info::noop1() const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
</UL>
<P><STRONG><a name="[7c]"></a>__cxxabiv1::__shim_type_info::noop2() const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
</UL>
<P><STRONG><a name="[7e]"></a>__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const &rArr; __cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[7f]"></a>__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[80]"></a>__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[227]"></a>__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
</UL>

<P><STRONG><a name="[7d]"></a>__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const &rArr; __dynamic_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
</UL>
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
</UL>
<P><STRONG><a name="[82]"></a>__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const &rArr; __cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[83]"></a>__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[84]"></a>__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[86]"></a>__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const &rArr; __cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
</UL>
<P><STRONG><a name="[87]"></a>__cxxabiv1::__vmi_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</STRONG> (Thumb, 618 bytes, Stack size 48 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __cxxabiv1::__vmi_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
</UL>
<P><STRONG><a name="[88]"></a>__cxxabiv1::__vmi_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxxabiv1::__vmi_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const &rArr; __cxxabiv1::__base_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__base_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv121__vmi_class_type_infoE)
</UL>
<P><STRONG><a name="[229]"></a>__cxxabiv1::__base_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxxabiv1::__base_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__vmi_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const
</UL>

<P><STRONG><a name="[17f]"></a>std::__1::__vector_base_common&lang;(bool)1&rang;::__throw_length_error() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vector.cpp.o(.text._ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[186]"></a>std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;::max_size() const</STRONG> (Thumb, 104 bytes, Stack size 76 bytes, keyprocess.o(.text._ZNKSt3__16vectorIP10KeyProcessNS_9allocatorIS2_EEE8max_sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;::max_size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[17e]"></a>std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::max_size() const</STRONG> (Thumb, 100 bytes, Stack size 76 bytes, keyprocess.o(.text._ZNKSt3__16vectorItNS_9allocatorItEEE8max_sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::max_size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[187]"></a>std::__1::__split_buffer&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&&rang;::__split_buffer__sub_object(unsigned, unsigned, std::__1::allocator&lang;KeyProcess*&rang;&)</STRONG> (Thumb, 230 bytes, Stack size 144 bytes, keyprocess.o(.text._ZNSt3__114__split_bufferIP10KeyProcessRNS_9allocatorIS2_EEEC2EjjS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = std::__1::__split_buffer&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&&rang;::__split_buffer__sub_object(unsigned, unsigned, std::__1::allocator&lang;KeyProcess*&rang;&) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[189]"></a>std::__1::__split_buffer&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&&rang;::~__split_buffer__sub_object()</STRONG> (Thumb, 234 bytes, Stack size 168 bytes, keyprocess.o(.text._ZNSt3__114__split_bufferIP10KeyProcessRNS_9allocatorIS2_EEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = std::__1::__split_buffer&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&&rang;::~__split_buffer__sub_object() &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[180]"></a>std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;::__split_buffer__sub_object(unsigned, unsigned, std::__1::allocator&lang;unsigned short&rang;&)</STRONG> (Thumb, 230 bytes, Stack size 144 bytes, keyprocess.o(.text._ZNSt3__114__split_bufferItRNS_9allocatorItEEEC2EjjS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;::__split_buffer__sub_object(unsigned, unsigned, std::__1::allocator&lang;unsigned short&rang;&) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[182]"></a>std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;::~__split_buffer__sub_object()</STRONG> (Thumb, 234 bytes, Stack size 168 bytes, keyprocess.o(.text._ZNSt3__114__split_bufferItRNS_9allocatorItEEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;::~__split_buffer__sub_object() &rArr; std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[22b]"></a>std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, keyprocess.o(.text._ZNSt3__117_DeallocateCaller27__do_deallocate_handle_sizeEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned) &rArr; std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_call(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__split_buffer&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&&rang;::~__split_buffer__sub_object()
</UL>

<P><STRONG><a name="[22c]"></a>std::__1::_DeallocateCaller::__do_call(void*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, keyprocess.o(.text._ZNSt3__117_DeallocateCaller9__do_callEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = std::__1::_DeallocateCaller::__do_call(void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned)
</UL>

<P><STRONG><a name="[184]"></a>std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;&, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, keyprocess.o(.text._ZNSt3__16vectorIP10KeyProcessNS_9allocatorIS2_EEE21_ConstructTransactionC2ERS5_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;&, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[185]"></a>std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, keyprocess.o(.text._ZNSt3__16vectorIP10KeyProcessNS_9allocatorIS2_EEE21_ConstructTransactionD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[188]"></a>std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;::__swap_out_circular_buffer(std::__1::__split_buffer&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&&rang;&)</STRONG> (Thumb, 634 bytes, Stack size 368 bytes, keyprocess.o(.text._ZNSt3__16vectorIP10KeyProcessNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = std::__1::vector&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&rang;::__swap_out_circular_buffer(std::__1::__split_buffer&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&&rang;&) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[17c]"></a>std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;&, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, keyprocess.o(.text._ZNSt3__16vectorItNS_9allocatorItEEE21_ConstructTransactionC2ERS3_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;&, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[17d]"></a>std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, keyprocess.o(.text._ZNSt3__16vectorItNS_9allocatorItEEE21_ConstructTransactionD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[181]"></a>std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::__swap_out_circular_buffer(std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;&)</STRONG> (Thumb, 634 bytes, Stack size 368 bytes, keyprocess.o(.text._ZNSt3__16vectorItNS_9allocatorItEEE26__swap_out_circular_bufferERNS_14__split_bufferItRS2_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::__swap_out_circular_buffer(std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[286]"></a>std::type_info::~type_info()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stdlib_typeinfo.cpp.o(.text._ZNSt9type_infoD2Ev), UNUSED)

<P><STRONG><a name="[18c]"></a>std::type_info::~type_info__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stdlib_typeinfo.cpp.o(.text._ZNSt9type_infoD2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__enum_type_info::~__enum_type_info()
</UL>

<P><STRONG><a name="[22d]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[74]"></a>thunk{-32} to Mpu6050::gyroAccUpdate()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, mpu6050.o(.text._ZThn32_N7Mpu605013gyroAccUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = thunk{-32} to Mpu6050::gyroAccUpdate() &rArr; Mpu6050::gyroAccUpdate() &rArr; Mpu6050::Mpu6050_Read() &rArr; Mpu6050::Mpu6050_Read_Gyro_Data() &rArr; IIC::iicRegReadByte(unsigned char, unsigned char) &rArr; IIC::iicRegReadData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::gyroAccUpdate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[75]"></a>thunk{-32} to Mpu6050::init()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, mpu6050.o(.text._ZThn32_N7Mpu60504initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = thunk{-32} to Mpu6050::init() &rArr; Mpu6050::init() &rArr; Mpu6050::init(unsigned short, unsigned short) &rArr; IIC::iicRegWriteByte(unsigned char, unsigned char, unsigned char) &rArr; IIC::iicRegWriteData(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mpu6050::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(.rodata._ZTV7Mpu6050)
</UL>
<P><STRONG><a name="[133]"></a>operator delete[] (void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdaPv))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::save()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::read()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromMEMORY()
</UL>

<P><STRONG><a name="[18a]"></a>operator delete (void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::setPlanNum(int)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::~Line__sub_object()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::_DeallocateCaller::__do_call(void*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::~Line__sub_object()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info__deallocating()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::~__class_type_info__deallocating()
</UL>

<P><STRONG><a name="[132]"></a>operator new[] (unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid(int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::setPlanNum(int)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::save()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::TimeSimultaneity(int, int, int)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::Led(unsigned, GPIO_TypeDef*, unsigned short)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromMEMORY()
</UL>

<P><STRONG><a name="[14f]"></a>operator new(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::Ptz_Task_Init()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuInit()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::append(unsigned short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__split_buffer&lang;KeyProcess*, std::__1::allocator&lang;KeyProcess*&rang;&&rang;::__split_buffer__sub_object(unsigned, unsigned, std::__1::allocator&lang;KeyProcess*&rang;&)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;::__split_buffer__sub_object(unsigned, unsigned, std::__1::allocator&lang;unsigned short&rang;&)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned short&rang;::insert(unsigned, unsigned short)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::insert(unsigned, unsigned char*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line&lang;unsigned char*&rang;::append(unsigned char*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::PTZ()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::Fire(unsigned short, unsigned short, unsigned short)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::AmmoCover()
</UL>

<P><STRONG><a name="[1df]"></a>__ARM_isinff</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, filter.o(.text.__ARM_isinff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpf2p::Apply(float)
</UL>

<P><STRONG><a name="[64]"></a>__cxa_pure_virtual</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic.o(.rodata._ZTV3IIC)
</UL>
<P><STRONG><a name="[228]"></a>__dynamic_cast</STRONG> (Thumb, 168 bytes, Stack size 88 bytes, private_typeinfo.cpp.o(.text.__dynamic_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __dynamic_cast
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[22e]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = main &rArr; boardALLInit() &rArr; imuInit() &rArr; ImuCalc::initalAngle() &rArr; AHRS_init &rArr; angle_to_quat &rArr; AHRS_sinf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardALLInit()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTickInit()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTimeForRunTimeStats
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1fa]"></a>AHRS_init</STRONG> (Thumb, 626 bytes, Stack size 80 bytes, ahrs.o(i.AHRS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AHRS_init &rArr; angle_to_quat &rArr; AHRS_sinf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_sinf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_invSqrt
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_get_latitude
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_get_height
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_cosf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_atan2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_asinf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_to_quat
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::initalAngle()
</UL>

<P><STRONG><a name="[1fe]"></a>AHRS_update</STRONG> (Thumb, 314 bytes, Stack size 136 bytes, ahrs.o(i.AHRS_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = AHRS_update &rArr; accel_comple_filter &rArr; accel_update_kp_ki &rArr; AHRS_invSqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_w
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quat_normalization
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_comple_filter
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_IMU_update(bool)
</UL>

<P><STRONG><a name="[24d]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[23f]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[23c]"></a>__aligned_malloc</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, mallocra.o(i.__aligned_malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[bd]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocra.o(i.__free$realloc$memalign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::~TimeSimultaneity()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[bf]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_IMU_update(bool)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::initalAngle()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_asinf
</UL>

<P><STRONG><a name="[c1]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::initalAngle()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_atan2f
</UL>

<P><STRONG><a name="[1dd]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpf2p::SetCutoffFreq(float, float)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::initalAngle()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMOOTH::smooth_cos(float, float)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
</UL>

<P><STRONG><a name="[1f7]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::randomspeed_gyro()
</UL>

<P><STRONG><a name="[1ee]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::initalAngle()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::chassis_run()
</UL>

<P><STRONG><a name="[c5]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::initalAngle()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_invSqrt
</UL>

<P><STRONG><a name="[1dc]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lpf2p::SetCutoffFreq(float, float)
</UL>

<P><STRONG><a name="[248]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[249]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[24c]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[24a]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[ba]"></a>malloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mallocra.o(i.__malloc$realloc$memalign))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aligned_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::TimeSimultaneity(int, int, int)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[247]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[246]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[24e]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[241]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[244]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[243]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[240]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[245]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[287]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[288]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[289]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[242]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[24b]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1fb]"></a>get_angle</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, ahrs.o(i.get_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_angle &rArr; AHRS_atan2f &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_atan2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::TDT_IMU_update(bool)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::initalAngle()
</UL>

<P><STRONG><a name="[23e]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11d]"></a>_ZL14SysTick_Configj</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, board.o(.text._ZL14SysTick_Configj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ZL14SysTick_Configj &rArr; _ZL18__NVIC_SetPriority4IRQnj
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SetPriority4IRQnj
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTickInit()
</UL>

<P><STRONG><a name="[16e]"></a>_ZL18__NVIC_SetPriority4IRQnj</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, board.o(.text._ZL18__NVIC_SetPriority4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL18__NVIC_SetPriority4IRQnj
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL14SysTick_Configj
</UL>

<P><STRONG><a name="[203]"></a>_ZL18__NVIC_SystemResetv</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, imu.o(.text._ZL18__NVIC_SystemResetv))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImuCalc::getOffset()
</UL>

<P><STRONG><a name="[89]"></a>_GLOBAL__sub_I_KeyProcess.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, keyprocess.o(.text._GLOBAL__sub_I_KeyProcess.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GLOBAL__sub_I_KeyProcess.cpp &rArr; __cxx_global_var_init &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyprocess.o(.init_array)
</UL>
<P><STRONG><a name="[fa]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, keyprocess.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init &rArr; Cycle::Cycle__sub_object() &rArr; Cycle::getCycleT() &rArr; getSysTimeUs()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cycle::Cycle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_KeyProcess.cpp
</UL>

<P><STRONG><a name="[8a]"></a>_GLOBAL__sub_I_smooth_start.cpp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, smooth_start.o(.text._GLOBAL__sub_I_smooth_start.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _GLOBAL__sub_I_smooth_start.cpp &rArr; __cxx_global_var_init.3 &rArr; SMOOTH::SMOOTH__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth_start.o(.init_array)
</UL>
<P><STRONG><a name="[108]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smooth_start.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init &rArr; SMOOTH::SMOOTH__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMOOTH::SMOOTH__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_smooth_start.cpp
</UL>

<P><STRONG><a name="[109]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smooth_start.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.1 &rArr; SMOOTH::SMOOTH__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMOOTH::SMOOTH__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_smooth_start.cpp
</UL>

<P><STRONG><a name="[10a]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smooth_start.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.2 &rArr; SMOOTH::SMOOTH__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMOOTH::SMOOTH__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_smooth_start.cpp
</UL>

<P><STRONG><a name="[10b]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smooth_start.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init.3 &rArr; SMOOTH::SMOOTH__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMOOTH::SMOOTH__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_smooth_start.cpp
</UL>

<P><STRONG><a name="[8b]"></a>_GLOBAL__sub_I_can.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, can.o(.text._GLOBAL__sub_I_can.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _GLOBAL__sub_I_can.cpp &rArr; __cxx_global_var_init &rArr; PowerRecvMsg::PowerRecvMsg__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.init_array)
</UL>
<P><STRONG><a name="[149]"></a>_ZL15canGpioNvicInitP11CAN_TypeDef</STRONG> (Thumb, 328 bytes, Stack size 72 bytes, can.o(.text._ZL15canGpioNvicInitP11CAN_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _ZL15canGpioNvicInitP11CAN_TypeDef &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit(CAN_TypeDef*)
</UL>

<P><STRONG><a name="[fe]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, can.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init &rArr; PowerRecvMsg::PowerRecvMsg__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRecvMsg::PowerRecvMsg__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_can.cpp
</UL>

<P><STRONG><a name="[d3]"></a>_ZL9TIM2_Initjt</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, timer.o(.text._ZL9TIM2_Initjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _ZL9TIM2_Initjt &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTimeForRunTimeStats
</UL>

<P><STRONG><a name="[8c]"></a>_GLOBAL__sub_I_vision.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vision.o(.text._GLOBAL__sub_I_vision.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _GLOBAL__sub_I_vision.cpp &rArr; __cxx_global_var_init &rArr; TimeSimultaneity::TimeSimultaneity(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vision.o(.init_array)
</UL>
<P><STRONG><a name="[10f]"></a>__cxx_global_var_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vision.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __cxx_global_var_init &rArr; TimeSimultaneity::TimeSimultaneity(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSimultaneity::TimeSimultaneity(int, int, int)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_vision.cpp
</UL>

<P><STRONG><a name="[16b]"></a>_ZL13judge_BitSitet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, iic.o(.text._ZL13judge_BitSitet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13judge_BitSitet
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softiic::Softiic(GPIO_TypeDef*, unsigned short, unsigned short, I2C_TypeDef*, unsigned, GPIO_TypeDef*, unsigned)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13judge_BitSitet
</UL>

<P><STRONG><a name="[8d]"></a>_GLOBAL__sub_I_adc.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adc.o(.text._GLOBAL__sub_I_adc.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _GLOBAL__sub_I_adc.cpp &rArr; __cxx_global_var_init &rArr; Adc::Adc(GPIO_TypeDef*, unsigned short, ADC_TypeDef*, unsigned char) &rArr; _ZL13judge_BitSitet &rArr;  _ZL13judge_BitSitet (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.init_array)
</UL>
<P><STRONG><a name="[16c]"></a>_ZL13judge_BitSitet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, adc.o(.text._ZL13judge_BitSitet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = _ZL13judge_BitSitet &rArr;  _ZL13judge_BitSitet (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13judge_BitSitet
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13judge_BitSitet
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::Adc(GPIO_TypeDef*, unsigned short, ADC_TypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[fb]"></a>__cxx_global_var_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, adc.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxx_global_var_init &rArr; Adc::Adc(GPIO_TypeDef*, unsigned short, ADC_TypeDef*, unsigned char) &rArr; _ZL13judge_BitSitet &rArr;  _ZL13judge_BitSitet (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc::Adc(GPIO_TypeDef*, unsigned short, ADC_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_adc.cpp
</UL>

<P><STRONG><a name="[8e]"></a>_GLOBAL__sub_I_pwm.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pwm.o(.text._GLOBAL__sub_I_pwm.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _GLOBAL__sub_I_pwm.cpp &rArr; __cxx_global_var_init &rArr; Pwm::Pwm(GPIO_TypeDef*, unsigned short, TIM_TypeDef*, unsigned char) &rArr; Pid::Pid(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(.init_array)
</UL>
<P><STRONG><a name="[16d]"></a>_ZL13judge_BitSitet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pwm.o(.text._ZL13judge_BitSitet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = _ZL13judge_BitSitet &rArr;  _ZL13judge_BitSitet (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13judge_BitSitet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::Pwm(GPIO_TypeDef*, unsigned short, TIM_TypeDef*, unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13judge_BitSitet
</UL>

<P><STRONG><a name="[16f]"></a>_ZL16judge_timBitSitet</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pwm.o(.text._ZL16judge_timBitSitet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = _ZL16judge_timBitSitet &rArr;  _ZL16judge_timBitSitet (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16judge_timBitSitet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::Pwm(GPIO_TypeDef*, unsigned short, TIM_TypeDef*, unsigned char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16judge_timBitSitet
</UL>

<P><STRONG><a name="[107]"></a>__cxx_global_var_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pwm.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __cxx_global_var_init &rArr; Pwm::Pwm(GPIO_TypeDef*, unsigned short, TIM_TypeDef*, unsigned char) &rArr; Pid::Pid(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm::Pwm(GPIO_TypeDef*, unsigned short, TIM_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_pwm.cpp
</UL>

<P><STRONG><a name="[1c6]"></a>_ZL18__NVIC_SystemResetv</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dbus.o(.text._ZL18__NVIC_SystemResetv))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC::rstCount()
</UL>

<P><STRONG><a name="[8f]"></a>_GLOBAL__sub_I_judgement.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, judgement.o(.text._GLOBAL__sub_I_judgement.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _GLOBAL__sub_I_judgement.cpp &rArr; __cxx_global_var_init &rArr; Judgement::Judgement__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> judgement.o(.init_array)
</UL>
<P><STRONG><a name="[102]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, judgement.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __cxx_global_var_init &rArr; Judgement::Judgement__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judgement::Judgement__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_judgement.cpp
</UL>

<P><STRONG><a name="[21e]"></a>_ZL18__NVIC_SystemResetv</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, multi_imu.o(.text._ZL18__NVIC_SystemResetv))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiImu::getOffset()
</UL>

<P><STRONG><a name="[90]"></a>_GLOBAL__sub_I_flash_var.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_var.o(.text._GLOBAL__sub_I_flash_var.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _GLOBAL__sub_I_flash_var.cpp &rArr; __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_var.o(.init_array)
</UL>
<P><STRONG><a name="[101]"></a>__cxx_global_var_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, flash_var.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVar::FlashVar__sub_object(void(*)(unsigned*, unsigned), unsigned*(*)())
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_flash_var.cpp
</UL>

<P><STRONG><a name="[91]"></a>_GLOBAL__sub_I_bl24c512a.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bl24c512a.o(.text._GLOBAL__sub_I_bl24c512a.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _GLOBAL__sub_I_bl24c512a.cpp &rArr; __cxx_global_var_init &rArr; Bl24Cxx::Bl24Cxx(unsigned char, GPIO_TypeDef*, unsigned short, unsigned short, GPIO_TypeDef*, I2C_TypeDef*) &rArr; Softiic::Softiic__sub_object(GPIO_TypeDef*, unsigned short, unsigned short, I2C_TypeDef*, unsigned, GPIO_TypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bl24c512a.o(.init_array)
</UL>
<P><STRONG><a name="[fd]"></a>__cxx_global_var_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bl24c512a.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __cxx_global_var_init &rArr; Bl24Cxx::Bl24Cxx(unsigned char, GPIO_TypeDef*, unsigned short, unsigned short, GPIO_TypeDef*, I2C_TypeDef*) &rArr; Softiic::Softiic__sub_object(GPIO_TypeDef*, unsigned short, unsigned short, I2C_TypeDef*, unsigned, GPIO_TypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bl24Cxx::Bl24Cxx(unsigned char, GPIO_TypeDef*, unsigned short, unsigned short, GPIO_TypeDef*, I2C_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_bl24c512a.cpp
</UL>

<P><STRONG><a name="[92]"></a>_GLOBAL__sub_I_power.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, power.o(.text._GLOBAL__sub_I_power.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _GLOBAL__sub_I_power.cpp &rArr; __cxx_global_var_init &rArr; Power::Power__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> power.o(.init_array)
</UL>
<P><STRONG><a name="[105]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, power.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init &rArr; Power::Power__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power::Power__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_power.cpp
</UL>

<P><STRONG><a name="[d1]"></a>CheckITStatus</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f4xx_can.o(.text.CheckITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[dd]"></a>SetSysClock</STRONG> (Thumb, 310 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[93]"></a>_GLOBAL__sub_I_chassis_task.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, chassis_task.o(.text._GLOBAL__sub_I_chassis_task.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _GLOBAL__sub_I_chassis_task.cpp &rArr; __cxx_global_var_init &rArr; Chassis::Chassis() &rArr; Pid::setPlanNum(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_task.o(.init_array)
</UL>
<P><STRONG><a name="[ff]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chassis_task.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __cxx_global_var_init &rArr; Chassis::Chassis() &rArr; Pid::setPlanNum(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_chassis_task.cpp
</UL>

<P><STRONG><a name="[94]"></a>_GLOBAL__sub_I_led_task.cpp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led_task.o(.text._GLOBAL__sub_I_led_task.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _GLOBAL__sub_I_led_task.cpp &rArr; __cxx_global_var_init.1 &rArr; Led::Led(unsigned, GPIO_TypeDef*, unsigned short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_task.o(.init_array)
</UL>
<P><STRONG><a name="[103]"></a>__cxx_global_var_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led_task.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __cxx_global_var_init &rArr; Led::Led(unsigned, GPIO_TypeDef*, unsigned short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::Led(unsigned, GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_led_task.cpp
</UL>

<P><STRONG><a name="[104]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led_task.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __cxx_global_var_init.1 &rArr; Led::Led(unsigned, GPIO_TypeDef*, unsigned short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led::Led(unsigned, GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_led_task.cpp
</UL>

<P><STRONG><a name="[95]"></a>_GLOBAL__sub_I_ptz_task.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ptz_task.o(.text._GLOBAL__sub_I_ptz_task.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_ptz_task.cpp &rArr; __cxx_global_var_init &rArr; PTZ::PTZ() &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ptz_task.o(.init_array)
</UL>
<P><STRONG><a name="[106]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ptz_task.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __cxx_global_var_init &rArr; PTZ::PTZ() &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTZ::PTZ()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ptz_task.cpp
</UL>

<P><STRONG><a name="[96]"></a>_GLOBAL__sub_I_fire_task.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fire_task.o(.text._GLOBAL__sub_I_fire_task.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _GLOBAL__sub_I_fire_task.cpp &rArr; __cxx_global_var_init &rArr; Fire::Fire(unsigned short, unsigned short, unsigned short) &rArr; Pid::setPlanNum(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fire_task.o(.init_array)
</UL>
<P><STRONG><a name="[100]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fire_task.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __cxx_global_var_init &rArr; Fire::Fire(unsigned short, unsigned short, unsigned short) &rArr; Pid::setPlanNum(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire::Fire(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_fire_task.cpp
</UL>

<P><STRONG><a name="[97]"></a>_GLOBAL__sub_I_ammo_cover_task.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ammo_cover_task.o(.text._GLOBAL__sub_I_ammo_cover_task.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _GLOBAL__sub_I_ammo_cover_task.cpp &rArr; __cxx_global_var_init &rArr; AmmoCover::AmmoCover() &rArr; Pid::setPlanNum(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ammo_cover_task.o(.init_array)
</UL>
<P><STRONG><a name="[fc]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ammo_cover_task.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __cxx_global_var_init &rArr; AmmoCover::AmmoCover() &rArr; Pid::setPlanNum(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmmoCover::AmmoCover()
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ammo_cover_task.cpp
</UL>

<P><STRONG><a name="[98]"></a>_GLOBAL__sub_I_state_task.cpp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, state_task.o(.text._GLOBAL__sub_I_state_task.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192<LI>Call Chain = _GLOBAL__sub_I_state_task.cpp &rArr; __cxx_global_var_init.2 &rArr; KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char) &rArr; std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::__swap_out_circular_buffer(std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state_task.o(.init_array)
</UL>
<P><STRONG><a name="[22a]"></a>_ZL18__NVIC_SystemResetv</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, state_task.o(.text._ZL18__NVIC_SystemResetv))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$_0::operator ()(unsigned*) const
</UL>

<P><STRONG><a name="[5f]"></a>$_0::__invoke(unsigned*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, state_task.o(.text._ZN3$_08__invokeEPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = $_0::__invoke(unsigned*) &rArr; $_0::operator ()(unsigned*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$_0::operator ()(unsigned*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state_task.o(.text._ZNK3$_0cvPFvPjEEv)
</UL>
<P><STRONG><a name="[198]"></a>$_0::operator ()(unsigned*) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, state_task.o(.text._ZNK3$_0clEPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = $_0::operator ()(unsigned*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL18__NVIC_SystemResetv
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$_0::__invoke(unsigned*)
</UL>

<P><STRONG><a name="[234]"></a>$_0::operator void(*)(unsigned*)() const</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, state_task.o(.text._ZNK3$_0cvPFvPjEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = $_0::operator void(*)(unsigned*)() const
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
</UL>

<P><STRONG><a name="[10c]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, state_task.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __cxx_global_var_init &rArr; FastSelfCheck::FastSelfCheck__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSelfCheck::FastSelfCheck__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_state_task.cpp
</UL>

<P><STRONG><a name="[10d]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, state_task.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxx_global_var_init.1 &rArr; StateCtrl::StateCtrl__sub_object() &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCtrl::StateCtrl__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_state_task.cpp
</UL>

<P><STRONG><a name="[10e]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, state_task.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184<LI>Call Chain = __cxx_global_var_init.2 &rArr; KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char) &rArr; std::__1::vector&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&rang;::__swap_out_circular_buffer(std::__1::__split_buffer&lang;unsigned short, std::__1::allocator&lang;unsigned short&rang;&&rang;&) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess::KeyProcess(unsigned short, void(*)(unsigned*), void(*)(unsigned*), void(*)(unsigned*), unsigned char, unsigned char)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$_0::operator void(*)(unsigned*)() const
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_state_task.cpp
</UL>

<P><STRONG><a name="[250]"></a>AHRS_fabs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ahrs.o(i.AHRS_fabs))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_update_kp_ki
</UL>

<P><STRONG><a name="[239]"></a>accel_comple_filter</STRONG> (Thumb, 454 bytes, Stack size 64 bytes, ahrs.o(i.accel_comple_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = accel_comple_filter &rArr; accel_update_kp_ki &rArr; AHRS_invSqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_invSqrt
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_update_kp_ki
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_update
</UL>

<P><STRONG><a name="[24f]"></a>accel_update_kp_ki</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, ahrs.o(i.accel_update_kp_ki))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = accel_update_kp_ki &rArr; AHRS_invSqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_invSqrt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_comple_filter
</UL>

<P><STRONG><a name="[238]"></a>angle_to_quat</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, ahrs.o(i.angle_to_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = angle_to_quat &rArr; AHRS_sinf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_sinf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_init
</UL>

<P><STRONG><a name="[23b]"></a>quat_normalization</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ahrs.o(i.quat_normalization))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = quat_normalization &rArr; AHRS_invSqrt &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_invSqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_update
</UL>

<P><STRONG><a name="[23a]"></a>update_w</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, ahrs.o(i.update_w))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_update
</UL>

<P><STRONG><a name="[23d]"></a>internal_alloc</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mallocra.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aligned_malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
